C MODPATH-PLOT Version 3.00 (V3, Release 2, 5-99)
C Changes:
C   No change since previous release: (V3, Release 1, 9-94)
C***** SUBROUTINES *****
C     LINES
C     ADDPTS
C     SAVPT
C     ABZC
C     LCLPTS
C     ZCOMP
C     POINTS
C     GETEPT
C     ABZAVE
C     GETRLT
C***********************
 
C***** SUBROUTINE *****
      SUBROUTINE LINES (IU,IUEP,IUCBF,IUTMP,IUIZP,IUSUM,PTSCAL,ZBOT,
     1ZTOP,ZMN,ZMX,NZDIM,IGRID,IXTYPE,IXYDIR,HEAD,BUFF,LAYCON,NCON,IDIR,
     2IBPZON,NCOL,NROW,NLAY,IVIEW,IPTS,IPROJ,NSEC,NCLR,ISKIP,TMAX,NUMTS,
     3NPER,XMIN,XMAX,NX,HDRY,HNOFLO,ISS,VEX,ICMPCT,HPREV,TBEGIN,PERLEN,
     4TIMX,KMIN,KMAX)
      DIMENSION IBPZON(NCOL,NROW,NLAY),ZBOT(NZDIM),ZTOP(NZDIM),
     1 BUFF(NCOL,NROW,NLAY),HEAD(NCOL,NROW,NLAY),LAYCON(NLAY),
     2 NCON(NLAY),NUMTS(NPER),XMIN(NX),XMAX(NX),ZMN(NLAY),ZMX(NLAY),
     3 HPREV(NCOL,NROW,NLAY),PERLEN(NPER),TIMX(NPER)
      DIMENSION X(1000),Y(1000)
      CHARACTER*1 COM
      INTEGER*4 IZONE4,IZPART
C
      COM= '@'
      NPTDIM=1000
      TOTLEN=XMAX(NX)
 
      IF(IVIEW.EQ.1) THEN
        CALL FINDUN(IUNIT)
        OPEN(IUNIT,FILE='paths.dcf')
        WRITE(IUNIT,2000) COM
2000    FORMAT(A1,' PATHLINES IN DCF FORMAT; STYLE=DOTTED')
        WRITE(IUNIT,2010)
2010    FORMAT('PL.STYLE 3')
        WRITE(IUNIT,2020)
2020    FORMAT('PL.COLOR 1')
1000    FORMAT(A1,' SEGMENT FOR PATHLINE ',I6)
      END IF
C
      REWIND(IUTMP)
C
      CALL GSELTR(2)
      MAXSEG=NPTDIM-5
      ISKP=0
      CALL EZONES (IBPZON,ICMPCT,NCOL,NROW,NLAY,IUEP,IUIZP,NPTCL)
      IF (IDIR.EQ.0.AND.ISKIP.EQ.1) ISKP=1
C
C  CALCULATE SIZE OF MARKER
C
      SMARK1= 0.005*PTSCAL
      SMARK2=SMARK1
C
      IF(NCLR.GE.0) THEN
      KCLR=NCLR
      IF(KCLR.EQ.0) KCLR=1
      CALL PKCLR (KCLR)
      ELSE
      CALL PKCLR (1)
      END IF
C
      IF (NCLR.LE.-1.AND.NCLR.GE.-3) THEN
      NNN= -NCLR
      CALL PKPAT (NNN)
      END IF
C
      IFIRST=1
      IC=0
      IPC=1
      NSTEP=0
      IVER=0
      TREF=0.0
      IF(ISS.EQ.0 .AND. IVIEW.GT.1 .AND. IXTYPE.NE.0) THEN
        CALL FINDUN(IUNTS)
        OPEN(IUNTS,ACCESS='DIRECT',FORM='UNFORMATTED',STATUS='SCRATCH',
     1       RECL=4)
        IZERO=0
        DO 5 N=1,NPTCL
5       WRITE(IUNTS,REC=N) IZERO
      END IF

      J=0
      I=0
      K=0
      XP=0.
      YP=0.
      ZPL=0.
10    CONTINUE
C--- GET NEW POINT
      JM1=J
      IM1=I
      KM1=K
      XM1=XP
      YM1=YP
      ZPLM1=ZPL
      NSOLD=NSTEP
C
      CALL READPL(IU,IVER,ICMPCT,IP,XP,YP,ZPL,ZZ,TT,J,I,K,NSTEP,
     1            NROW,NCOL,TREF,IERR)
      IF(IFIRST.EQ.1) THEN
        IFIRST=0
        WRITE(IUSUM,*) ' '
        WRITE(IUSUM,3000) TREF
        WRITE(IUSUM,*) ' '
3000    FORMAT(1X,'REFERENCE TIME READ FROM PATHLINE FILE: ',E15.6)
      END IF
      TP=TT
      IF(TP.LT.0.0) TP= -TP
      IF(IDIR.EQ.0) THEN
        TP=TP+TREF
      ELSE
        TP=TREF-TP
      END IF
 
      MP=1
      IF(ISS.EQ.0 .AND. IVIEW.GT.1 .AND. IXTYPE.NE.0) THEN
        READ(IUNTS,REC=IP) NSPREV
        WRITE(IUNTS,REC=IP)NSTEP
        IF(LAYCON(K).GT.0) MP=0
        CALL GETRLT(NPER,TBEGIN,NSTEP,TP,PERLEN,TIMX,NUMTS,TREL,IERR2)
      END IF
 
      IF(IVER.LT.100) THEN
        WRITE(IUSUM,*) 'IGNORING INVALID PATHLINE FILE.'
        RETURN
      END IF
 
      IF(IERR.EQ.1) GO TO 30
 
C--- LOAD HEADS FOR THE APPROPRIATE TIME STEP
      IF(NSTEP.NE.NSOLD) THEN
        IF(ISS.EQ.0 .AND. IVIEW.GT.1) THEN
c          write(*,*) 'loading heads from cbf.'
          IF(NSOLD.EQ.0) CALL CBFHED(BUFF,NCOL,NROW,NLAY,IUCBF,NSTEP,
     1      IERR,NUMTS,NPER,NSTEPF,NSTEPL,KPER,KSTP,1,IUSUM)
          IF(NSOLD.EQ.0 .AND. IDIR.EQ.0 .AND. NSTEP.GT.NSTEPF) THEN
            NM1=NSTEP-1
            CALL CBFHED(HPREV,NCOL,NROW,NLAY,IUCBF,NM1,
     1      IERR,NUMTS,NPER,NSTEPF,NSTEPL,KPER,KSTP,1,IUSUM)
          ELSE IF(NSOLD.EQ.0.AND.IDIR.EQ.1.AND.NSTEP.LT.NSTEPL) THEN
            NP1=NSTEP+1
            CALL CBFHED(HPREV,NCOL,NROW,NLAY,IUCBF,NP1,
     1      IERR,NUMTS,NPER,NSTEPF,NSTEPL,KPER,KSTP,1,IUSUM)
          ELSE
            DO 4 KK=1,NLAY
            DO 4 II=1,NROW
            DO 4 JJ=1,NCOL
4           HPREV(JJ,II,KK)=BUFF(JJ,II,KK)
          END IF
          IF(NSOLD.GT.0) CALL CBFHED(BUFF,NCOL,NROW,NLAY,IUCBF,NSTEP,
     1      IERR,NUMTS,NPER,NSTEPF,NSTEPL,KPER,KSTP,1,IUSUM)
        ELSE
          DO 1 KK=1,NLAY
          DO 1 II=1,NROW
          DO 1 JJ=1,NCOL
1         BUFF(JJ,II,KK)=HEAD(JJ,II,KK)
        END IF
      END IF
C
      IF(IVIEW.EQ.1) THEN
        LL=K
      ELSE IF (IVIEW.EQ.2) THEN
        LL=J
        IF(IXYDIR.EQ.1) YP= TOTLEN-YP
      ELSE IF (IVIEW.EQ.3) THEN
        LL=I
        IF(IXYDIR.EQ.1) XP= TOTLEN-XP
      END IF
C
      ITIME=0
      ISAVPT=0
      TTPOS= TT
      IF(TT.LT.0) TTPOS= -TT
      DELTIM= (TMAX-TTPOS)
      IF(DELTIM.LT.0) DELTIM= -DELTIM
      DELTIM= DELTIM/TMAX
      IF(TT.LT.0.0) THEN
      ISAVPT=1
      ITIME=1
      END IF
 
C--- FIND OUT IF NEW POINT IS A STARTING POINT
15    CONTINUE
      IF(IC.EQ.0) THEN
 
C  FIND ZONE CODE
      IF(IDIR.EQ.1) THEN
      IZPART=2*IP-1
      ELSE
      IZPART=2*IP
      END IF
      READ(IUIZP,REC=IZPART) IZONE4
      IZONE=IZONE4
      IZONE= ABS(IZONE)
C
      NFIRST=1
      IF(ISKP.EQ.1.AND.IZONE.EQ.1) NFIRST=0
      IF(IPROJ.EQ.1.AND.LL.NE.NSEC) NFIRST=0
      IF(IVIEW.GT.1 .AND. IXTYPE.NE.0) THEN
        IF(K.LT.KMIN .OR. K.GT.KMAX) THEN
          NFIRST=0
        ELSE IF(K.EQ.KMAX .AND. ZPL.LT.0.0) THEN
          NFIRST=0
        END IF
      END IF
      IF(ABS(TT).GE.TMAX) NFIRST=0
C
      IF(NFIRST.EQ.1) THEN
      IC=1
      IPC=IP
      N=0
      CALL ADDPTS(N,XMIN,XMAX,ISS,IDIR,TREL,HPREV,BUFF,ZBOT,ZTOP,ZMN,
     1 ZMX,LAYCON,NCON,NCOL,NROW,NLAY,NZDIM,NX,NPTDIM,IVIEW,IXTYPE,
     2 IGRID,J,I,0,K,0.,0.,0.,XP,YP,ZPL,HDRY,HNOFLO,IXYDIR,VEX,X,Y,MP)
 
      CALL SAVPT(IUTMP,ISAVPT,IP,X(N),Y(N),TT)
      IF(NCLR.EQ.0) CALL CYCLE(IZONE)
      IF(NCLR.EQ.-4) CALL PKPAT(IZONE)
      END IF
C
      GO TO 10
C
      END IF
 
C--- FIND OUT IF NEW POINT IS A TERMINAL POINT
      IF(IC.EQ.1) THEN
      NLAST=0
      IF(N.GE.MAXSEG) THEN
        NLAST=1
      ELSE IF(IP.NE.IPC) THEN
        NLAST=1
      ELSE IF(IPROJ.EQ.1.AND.LL.NE.NSEC) THEN
        NLAST=2
      ELSE IF(IVIEW.GT.1.AND.IXTYPE.NE.0.AND.K.LT.KMIN) THEN
        NLAST=2
      ELSE IF(IVIEW.GT.1.AND.IXTYPE.NE.0.AND.K.GT.KMAX) THEN
        NLAST=2
      ELSE IF(IVIEW.GT.1.AND.IXTYPE.NE.0.AND.K.EQ.KMAX
     1        .AND.ZPL.LE.0.0) THEN
        NLAST=2
      ELSE IF(ITIME.EQ.1.AND.DELTIM.LE.0.0001) THEN
        NLAST=2
      ELSE IF(ABS(TT).GT.TMAX) THEN
        NLAST=1
      END IF
 
      IF(NLAST.EQ.0) THEN
        CALL ADDPTS(N,XMIN,XMAX,ISS,IDIR,TREL,HPREV,BUFF,ZBOT,ZTOP,
     1   ZMN,ZMX,LAYCON,NCON,NCOL,NROW,NLAY,NZDIM,NX,NPTDIM,IVIEW,
     2   IXTYPE,IGRID,JM1,IM1,KM1,K,XM1,YM1,ZPLM1,XP,YP,ZPL,HDRY,
     3   HNOFLO,IXYDIR,VEX,X,Y,MP)
        CALL SAVPT(IUTMP,ISAVPT,IP,X(N),Y(N),TT)
        GO TO 10
 
      ELSE IF(NLAST.EQ.1) THEN
        IC=0
        CALL PLOTPL(N,X,Y)
        IF(IVIEW.EQ.1) THEN
          WRITE(IUNIT,1000) COM,IP
          CALL SAVSEG(N,X,Y,IUNIT)
        END IF
        CALL SAVPT(IUTMP,ISAVPT,IP,X(N),Y(N),TT)
        GO TO 15
 
      ELSE IF(NLAST.EQ.2) THEN
        IC=0
        CALL ADDPTS(N,XMIN,XMAX,ISS,IDIR,TREL,HPREV,BUFF,ZBOT,ZTOP,
     1   ZMN,ZMX,LAYCON,NCON,NCOL,NROW,NLAY,NZDIM,NX,NPTDIM,IVIEW,
     2   IXTYPE,IGRID,JM1,IM1,KM1,K,XM1,YM1,ZPLM1,XP,YP,ZPL,HDRY,
     3   HNOFLO,IXYDIR,VEX,X,Y,MP)
        CALL PLOTPL(N,X,Y)
        IF(IVIEW.EQ.1) THEN
          WRITE(IUNIT,1000) COM,IP
          CALL SAVSEG(N,X,Y,IUNIT)
        END IF
        CALL SAVPT(IUTMP,ISAVPT,IP,X(N),Y(N),TT)
        GO TO 10
      END IF
 
      END IF
C
30    CONTINUE
      IF(N.GT.1) THEN
        CALL PLOTPL(N,X,Y)
        IF(IVIEW.EQ.1) THEN
          WRITE(IUNIT,1000) COM,IP
          CALL SAVSEG(N,X,Y,IUNIT)
        END IF
      END IF
      REWIND(IUTMP)
C
35    CONTINUE
      IF(IPTS.EQ.1) THEN
37      READ(IUTMP,*,END=40) IP,XCUR,YCUR,TT
        IF(TT.LE.TMAX) THEN
 
C  FIND ZONE CODE
          IF(IDIR.EQ.1) THEN
          IZPART=2*IP-1
          ELSE
          IZPART=2*IP
          END IF
          READ(IUIZP,REC=IZPART) IZONE4
          IZONE=IZONE4
          IZONE= ABS(IZONE)
C
          IF(NCLR.EQ.0) CALL CYCLE(IZONE)
          CALL SYMBL(XCUR,YCUR,SMARK1,SMARK2,6)
        END IF
      GO TO 37
      END IF
40    CONTINUE
      IF (NCLR.LT.0) THEN
      CALL GSLN(1)
      END IF
      CALL GSELTR(1)
      CLOSE(IUTMP)
      IF(IVIEW.EQ.1) CLOSE(IUNIT)
      RETURN
      END
 
C***** SUBROUTINE *****
      SUBROUTINE ADDPTS(NP,XMIN,XMAX,ISS,IDIR,TREL,HPREV,H,ZB,ZT,ZMN,
     1 ZMX,LAYCON,NCON,NCOL,NROW,NLAY,NZDIM,NX,NPTDIM,IVIEW,IXTYPE,
     2 IGRID,J,I,K1,K2,XX1,YY1,ZL1,XX2,YY2,ZLL2,HDRY,HNOFLO,IXYDIR,
     3 VEX,X,Y,MP)
      DIMENSION ZB(NZDIM),ZT(NZDIM),LAYCON(NLAY),X(NPTDIM),
     1 Y(NPTDIM),NCON(NLAY),H(NCOL,NROW,NLAY),XMIN(NX),XMAX(NX),
     2 ZMN(NLAY),ZMX(NLAY),HPREV(NCOL,NROW,NLAY)
 
      ZL2=ZLL2
C--- IF THIS IS A MAP VIEW PLOT, ADD POINT (X2,Y2) TO POLYLINE ARRAY,
C    INCREMENT THE POINT COUNTER, AND RETURN
      IF(IVIEW.EQ.1) THEN
        NP=NP+1
        X(NP)=XX2
        Y(NP)=YY2
        RETURN
      END IF
 
C--- IF THIS IS A CROSS SECTION PLOT, THEN ...
 
C--- CHECK TO SEE IF THE PROJECTED LINE SEGMENT APPEARS VERTICAL. IF SO,
C    NO INTERMEDIATE POINT IS NECESSARY.
      IF(IVIEW.EQ.2) THEN
        X1=YY1
        X2=YY2
      ELSE
        X1=XX1
        X2=XX2
      END IF
      IV=0
      IF(X1.EQ.X2) IV=1
 
C--- SKIP OVER THE CHECK FOR AN INTERMEDIATE MIDPOINT IF:
C       1. CROSS SECTION IS NORMALIZED RECTANGLE, OR
C       2. POINT 2 IS FIRST POINT IN A NEW POLYLINE, OR
C       3. LINE SEGMENT IS VERTICAL
C
      k=k2
      IF(IXTYPE.NE.0 .AND. NP.GT.0 .AND. IV.EQ.0 .AND. MP.NE.0) THEN
C
 
C--- MODIFY LAYER NUMBER AND LOCAL VERTICAL COORDINATE OF POINT 2 IF
C    NECESSARY SO THAT POINTS 1 AND 2 ARE IN SAME GRID CELL
        IF(K2.LT.K1) THEN
          ZL2=1.0
        ELSE IF(K2.GT.K1) THEN
          IF(NCON(K1).GT.0) THEN
            ZL2= -1.0
          ELSE
            ZL2= 0.0
          END IF
        END IF
        k=k1
 
C--- START CHECKING TO SEE IF POINTS 1 AND 2 CROSS A CELL MIDPOINT.
C    IF SO, INSERT ANOTHER POINT IN THE POLYLINE ARRAY AND INCREMENT THE
C    POINT COUNTER
        DO 10 N=1,NX
        XNODE= (XMIN(N)+XMAX(N))/2.0
C
        IF(X1.LE.XNODE .AND. X2.GE.XNODE) THEN
          FAC= (XNODE-X1)/(X2-X1)
          ZL= ZL1*(1.0-FAC) + ZL2*FAC
          NP=NP+1
          X(NP)=XNODE
          CALL ABZAVE(H,HPREV,TREL,IDIR,ISS,ZT,ZB,ZMN,ZMX,NCOL,NROW,
     1     NLAY,NZDIM,LAYCON,IVIEW,IXTYPE,IGRID,IXYDIR,J,I,K,ZL,XMIN,
     2     XMAX,NX,HDRY,HNOFLO,VEX,XNODE,Y(NP))
          GO TO 15
        ELSE IF(X2.LE.XNODE .AND. X1.GE.XNODE) THEN
          FAC= (XNODE-X2)/(X1-X2)
          ZL= ZL2*(1.0-FAC) + ZL1*FAC
          NP=NP+1
          X(NP)=XNODE
          CALL ABZAVE(H,HPREV,TREL,IDIR,ISS,ZT,ZB,ZMN,ZMX,NCOL,NROW,
     1     NLAY,NZDIM,LAYCON,IVIEW,IXTYPE,IGRID,IXYDIR,J,I,K,ZL,XMIN,
     2     XMAX,NX,HDRY,HNOFLO,VEX,XNODE,Y(NP))
          GO TO 15
        END IF
C
10      CONTINUE
15      CONTINUE
      END IF
 
C--- CALCULATE THE ABSOLUTE VERTICAL COORDINATE OF POINT 2, ADD IT TO
C    THE POLYLINE, AND INCREMENT THE POINT COUNTER
      NP=NP+1
      X(NP)=X2
      CALL ABZAVE(H,HPREV,TREL,IDIR,ISS,ZT,ZB,ZMN,ZMX,NCOL,NROW,NLAY,
     1 NZDIM,LAYCON,IVIEW,IXTYPE,IGRID,IXYDIR,J,I,K,ZL2,XMIN,XMAX,NX,
     2 HDRY,HNOFLO,VEX,X(NP),Y(NP))
 
      RETURN
      END
 
C***** SUBROUTINE *****
      SUBROUTINE SAVPT(IU,ISAVPT,IP,X,Y,T)
      IF(ISAVPT.EQ.0) RETURN
      IF(T.LT.0.0) T= -T
      WRITE(IU,*) IP,X,Y,T
      ISAVPT=0
      RETURN
      END
 
C***** SUBROUTINE *****
      SUBROUTINE ABZC(H,ZTOP,ZBOT,ZMN,ZMX,NCOL,NROW,NLAY,NZDIM,LAYCON,
     1 IVIEW,IXTYPE,IGRID,IXYDIR,J,I,K,ZL,XMIN,XMAX,NX,HDRY,
     2 HNOFLO,VEX,XP,Z)
      DIMENSION TOP(3,3),BOT(3,3),HED(3,3)
      DIMENSION H(NCOL,NROW,NLAY),ZTOP(NZDIM),ZBOT(NZDIM),LAYCON(NLAY),
     1 XMIN(NX),XMAX(NX),ZMN(NLAY),ZMX(NLAY)
 
C
C  IF PLOT IS A NORMALIZED RECTANGULAR CROSS SECTION, THEN ...
      IF(IXTYPE.EQ.0) THEN
        IF(ZL.GE.0.0) THEN
          Z= VEX*(ZL*ZMX(K) + (1.0-ZL)*ZMN(K) )
        ELSE
          ZLL=ZL+1.0
          Z= VEX*(ZLL*ZMN(K) + (1.0-ZLL)*ZMX(K+1))
        END IF
        RETURN
      END IF
 
C  OTHERWISE, IF THIS IS A TRUE CROSS SECTION, THEN ...
      CALL LCLPTS(IVIEW,ZTOP,ZBOT,H,NROW,NCOL,NLAY,I,J,K,IGRID,
     1 IXYDIR,NZDIM,HNOFLO,VEX,TOP,BOT,HED)
      IF(IVIEW.EQ.2) THEN
        IF(IXYDIR.EQ.0) THEN
          NI=NROW-I+1
        ELSE
          NI=I
        END IF
      ELSE IF(IVIEW.EQ.3) THEN
        IF(IXYDIR.EQ.0) THEN
          NI=J
        ELSE
          NI=NCOL-J+1
        END IF
      END IF
 
      CALL ZCOMP(TOP,BOT,HED,LAYCON(K),ZL,XMIN,XMAX,NX,NI,HDRY,HNOFLO,
     1           VEX,XP,Z)
 
      RETURN
      END
 
C***** SUBROUTINE *****
      SUBROUTINE LCLPTS(IVIEW,ZTOP,ZBOT,H,NROW,NCOL,NLAY,IC,JC,K,
     1 IGRID,IXYDIR,NZDIM,HNOFLO,VEX,TOP,BOT,HED)
      DIMENSION TOP(3,3),BOT(3,3),HED(3,3)
      DIMENSION ZTOP(NZDIM),ZBOT(NZDIM),H(NCOL,NROW,NLAY)
C
      DO 5 II=1,3
      DO 5 JJ=1,3
      TOP(II,JJ)=1.0E+30
      BOT(II,JJ)=1.0E+30
      HED(II,JJ)=HNOFLO
5     CONTINUE
 
      IF(IVIEW.EQ.2) THEN
        NH=NROW
        I=IC
        ISEC=JC
      ELSE IF(IVIEW.EQ.3) THEN
        NH=NCOL
        I=JC
        ISEC=IC
      END IF
 
      IF(IGRID.EQ.1) THEN
        NN=0
        DO 10 NK=K-1,K+1
        NN=NN+1
        DO 10 NJ=1,3
        IF(NK.GE.1 .AND. NK.LE.NLAY) THEN
        TOP(NN,NJ)=ZTOP(NK)
        BOT(NN,NJ)=ZBOT(NK)
        END IF
10      CONTINUE
      ELSE
        II=0
        DO 15 NI=I-1,I+1
        II=II+1
        KK=0
        DO 15 NK=K-1,K+1
        KK=KK+1
        IF(NI.GE.1 .AND. NI.LE.NH .AND. NK.GE.1 .AND. NK.LE.NLAY)
     1    THEN
          IF(IVIEW.EQ.2) THEN
            NZ= NCOL*NROW*(NK-1) + NCOL*(NI-1) + ISEC
          ELSE IF(IVIEW.EQ.3) THEN
            NZ= NCOL*NROW*(NK-1) + NCOL*(ISEC-1) + NI
          END IF
          TOP(KK,II)=ZTOP(NZ)
          BOT(KK,II)=ZBOT(NZ)
        END IF
15      CONTINUE
      END IF
      II=0
      DO 20 NI=I-1,I+1
      II=II+1
      KK=0
      DO 20 NK=K-1,K+1
      KK=KK+1
      IF(NI.GE.1 .AND. NI.LE.NH .AND. NK.GE.1 .AND. NK.LE.NLAY) THEN
        IF(IVIEW.EQ.2) THEN
          HED(KK,II)=H(ISEC,NI,NK)
          IF(H(ISEC,NI,NK).NE.HNOFLO) HED(KK,II)=VEX*HED(KK,II)
        ELSE IF(IVIEW.EQ.3) THEN
          HED(KK,II)=H(NI,ISEC,NK)
          IF(H(NI,ISEC,NK).NE.HNOFLO) HED(KK,II)=VEX*HED(KK,II)
        END IF
      END IF
20    CONTINUE
      IREV=0
      IF(IVIEW.EQ.2 .AND. IXYDIR.EQ.0) IREV=1
      IF(IVIEW.EQ.3 .AND. IXYDIR.EQ.1) IREV=1
      IF(IREV.EQ.1) THEN
        DO 25 KK=1,3
        TEMP=TOP(KK,1)
        TOP(KK,1)=TOP(KK,3)
        TOP(KK,3)=TEMP
        TEMP=BOT(KK,1)
        BOT(KK,1)=BOT(KK,3)
        BOT(KK,3)=TEMP
        TEMP=HED(KK,1)
        HED(KK,1)=HED(KK,3)
        HED(KK,3)=TEMP
25      CONTINUE
      END IF
      DO 30 NK=1,3
      IF(TOP(NK,1).EQ.1.0E+30) THEN
        TOP(NK,1)=TOP(NK,2)
        HED(NK,1)=HED(NK,2)
      END IF
      IF(TOP(NK,3).EQ.1.0E+30) THEN
        TOP(NK,3)=TOP(NK,2)
        HED(NK,3)=HED(NK,2)
      END IF
      IF(BOT(NK,1).EQ.1.0E+30) BOT(NK,1)=BOT(NK,2)
      IF(BOT(NK,3).EQ.1.0E+30) BOT(NK,3)=BOT(NK,2)
30    CONTINUE
      RETURN
      END
 
C***** SUBROUTINE *****
      SUBROUTINE ZCOMP(TOP,BOT,HED,LAYCON,ZL,XMIN,XMAX,NX,N,DRY,
     1                 HNO,VEX,XP,Z)
      DIMENSION TOP(3,3),BOT(3,3),HED(3,3),C(2,2)
      DIMENSION XMIN(NX),XMAX(NX)
C
      HDRY=DRY*VEX
      XNODE=(XMIN(N)+XMAX(N))/2.0
 
      DO 1 II=1,3
      DO 1 JJ=1,3
      IF(HED(II,JJ).EQ.HNO) HED(II,JJ)=HDRY
1     CONTINUE
 
      LTYP=0
      IF(HED(2,2).NE.HDRY) THEN
        IF(LAYCON.EQ.1) THEN
          LTYP=1
        ELSE IF(LAYCON.GT.1 .AND. HED(2,2).LT.TOP(2,2)) THEN
          LTYP=1
        END IF
      END IF
 
      IF(XP.GE.XNODE) THEN
        X1=XNODE
        X2=XMAX(N)
        IF(N.EQ.NX) THEN
          FAC=0.5
        ELSE
          FAC=(XMAX(N)-XMIN(N))/(XMAX(N+1)-XMIN(N))
        END IF
        IF(ZL.GE.0.0) THEN
C... COMPUTE BOTTOM COEFFICIENTS
          C(2,1)=BOT(2,2)
          C(2,2)=FAC*BOT(2,3) + (1.0-FAC)*BOT(2,2)
 
C... IF LAYER IS DRY OR INACTIVE AND LAYER TYPE IS > 0, SET THICKNESS = 0
C    (PARTICLES SHOULDN'T GET IN CELLS THAT ARE IN THIS STATE)
          IF(HED(2,2).EQ.HDRY .AND. LAYCON.GT.0) THEN
            C(1,1)=C(2,1)
            C(1,2)=C(2,2)
 
C... ELSE IF A WATER TABLE EXISTS IN THE CELL, THEN
          ELSE IF(LTYP.EQ.1) THEN
            C(1,1)=HED(2,2)
            IF(HED(2,3).EQ.HDRY .AND. LAYCON.EQ.1) THEN
              IF(HED(2,2).GE.C(2,2)) THEN
                C(1,2)=HED(2,2)
              ELSE
                C(1,2)=C(2,2)
              END IF
            ELSE IF(HED(2,3).EQ.HDRY .AND. LAYCON.GT.1) THEN
              CALL PINCH(BOT(2,2),TOP(2,2),BOT(2,3),TOP(2,3),BOT(1,2),
     1               BOT(1,3),NPINCH)
              IF(NPINCH.EQ.0) THEN
                C(1,2)=FAC*TOP(2,3) + (1.0-FAC)*TOP(2,2)
              ELSE
                C(1,2)=FAC*BOT(1,3) + (1.0-FAC)*BOT(1,2)
              END IF
              IF(HED(2,2).LT.C(2,2)) THEN
                C(1,2)=C(2,2)
              ELSE IF(HED(2,2).LT.C(1,2)) THEN
                C(1,2)=HED(2,2)
              END IF
            ELSE
              C(1,2)=FAC*HED(2,3) + (1.0-FAC)*HED(2,2)
            END IF
 
C... OTHERWISE, USE TOP OF LAYER TO CALCULATE TOP COEFFICIENTS,
          ELSE
            C(1,1)=TOP(2,2)
            CALL PINCH(BOT(2,2),TOP(2,2),BOT(2,3),TOP(2,3),BOT(1,2),
     1               BOT(1,3),NPINCH)
            IF(NPINCH.EQ.0) THEN
              C(1,2)=FAC*TOP(2,3) + (1.0-FAC)*TOP(2,2)
            ELSE
              C(1,2)=FAC*BOT(1,3) + (1.0-FAC)*BOT(1,2)
            END IF
          END IF
        ELSE
          C(1,1)=BOT(2,2)
          C(2,1)=TOP(3,2)
          C(1,2)=FAC*BOT(2,3) + (1.0-FAC)*BOT(2,2)
          CALL PINCH(BOT(3,2),TOP(3,2),BOT(3,3),TOP(3,3),BOT(2,2),
     1               BOT(2,3),NPINCH)
          IF(NPINCH.EQ.0) THEN
            C(2,2)=FAC*TOP(3,3) + (1.0-FAC)*TOP(3,2)
          ELSE
            C(2,2)=FAC*BOT(2,3) + (1.0-FAC)*BOT(2,2)
          END IF
        END IF
      ELSE
        X1=XMIN(N)
        X2=XNODE
        IF(N.EQ.1) THEN
          FAC=0.5
        ELSE
          FAC=(XMAX(N-1)-XMIN(N-1))/(XMAX(N)-XMIN(N-1))
        END IF
        IF(ZL.GE.0.0) THEN
C... COMPUTE BOTTOM COEFFICIENTS
          C(2,2)=BOT(2,2)
          C(2,1)=FAC*BOT(2,2) + (1.0-FAC)*BOT(2,1)
 
C... IF LAYER IS DRY OR INACTIVE AND LAYER TYPE IS > 0, SET THICKNESS = 0
C    (PARTICLES SHOULDN'T GET IN CELLS THAT ARE IN THIS STATE)
          IF(HED(2,2).EQ.HDRY) THEN
            C(1,1)=C(2,1)
            C(1,2)=C(2,2)
 
C... ELSE IF A WATER TABLE EXISTS IN THE CELL, THEN
          ELSE IF(LTYP.EQ.1) THEN
            C(1,2)=HED(2,2)
            IF(HED(2,1).EQ.HDRY .AND. LAYCON.EQ.1) THEN
              IF(HED(2,2).GE.C(1,2)) THEN
                C(1,1)=HED(2,2)
              ELSE
                C(1,1)=C(1,2)
              END IF
            ELSE IF(HED(2,1).EQ.HDRY .AND. LAYCON.GT.1) THEN
              CALL PINCH(BOT(2,1),TOP(2,1),BOT(2,2),TOP(2,2),BOT(1,1),
     1               BOT(1,2),NPINCH)
              IF(NPINCH.EQ.0) THEN
                C(1,1)=FAC*TOP(2,2) + (1.0-FAC)*TOP(2,1)
              ELSE
                C(1,1)=FAC*BOT(1,2) + (1.0-FAC)*BOT(1,1)
              END IF
              IF(HED(2,2).LT.C(2,1)) THEN
                C(1,1)=C(2,1)
              ELSE IF(HED(2,2).LT.C(1,1)) THEN
                C(1,1)=HED(2,2)
              END IF
            ELSE
              C(1,1)=FAC*HED(2,2) + (1.0-FAC)*HED(2,1)
            END IF
 
C... OTHERWISE, USE TOP OF LAYER TO CALCULATE TOP COEFFICIENTS,
          ELSE
            C(1,2)=TOP(2,2)
            CALL PINCH(BOT(2,1),TOP(2,1),BOT(2,2),TOP(2,2),BOT(1,1),
     1               BOT(1,2),NPINCH)
            IF(NPINCH.EQ.0) THEN
              C(1,1)=FAC*TOP(2,2) + (1.0-FAC)*TOP(2,1)
            ELSE
              C(1,1)=FAC*BOT(1,2) + (1.0-FAC)*BOT(1,1)
            END IF
          END IF
        ELSE
          C(1,2)=BOT(2,2)
          C(2,2)=TOP(3,2)
          C(1,1)=FAC*BOT(2,2) + (1.0-FAC)*BOT(2,1)
          CALL PINCH(BOT(3,1),TOP(3,1),BOT(3,2),TOP(3,2),BOT(2,1),
     1               BOT(2,2),NPINCH)
          IF(NPINCH.EQ.0) THEN
            C(2,1)=FAC*TOP(3,2) + (1.0-FAC)*TOP(3,1)
          ELSE
            C(2,1)=FAC*BOT(2,2) + (1.0-FAC)*BOT(2,1)
          END IF
        END IF
      END IF
 
C--- COMPUTE ABSOLUTE Z COORDINATE CORRESPONDING TO POINT (XP,ZL)
      FAC= (XP-X1)/(X2-X1)
      Z2= FAC*C(1,2) + (1.0-FAC)*C(1,1)
      Z1= FAC*C(2,2) + (1.0-FAC)*C(2,1)
      ZLOC=ZL
      IF(ZLOC.LT.0.0) ZLOC=ZLOC + 1.0
      Z= (ZLOC*Z2 + (1.0-ZLOC)*Z1)
      RETURN
      END
 
C***** SUBROUTINE *****
      SUBROUTINE POINTS (IU,XL,XR,YB,YT,ZBOT,ZTOP,ZMN,ZMX,LAYCON,H,BUFF,
     1 XMIN,XMAX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NX,IXTYPE,IXYDIR,VEX,
     2 HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,NISP,IPROJ,NSEC,NCLR,
     3 IREV,IEPT,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,IB,IUSUM,IUCBF,ICMPCT)
C
      DIMENSION H(NCOL,NROW,NLAY),ZBOT(NZDIM),ZTOP(NZDIM),ZMN(NLAY),
     1 ZMX(NLAY),ISPLOT(NISP),BUFF(NCOL,NROW,NLAY),NUMTS(NPER),XMIN(NX),
     2 XMAX(NX),IB(NCOL,NROW,NLAY)
C
      WRITE(IUSUM,*) ' POINTS WILL BE PLOTTED FOR:'
      IF(ITYPE.GE.2 .AND. ITYPE.LE.4) THEN
        WRITE(IUSUM,*) ' ENDPOINT ANALYSIS.'
        IF(IEPOPT.EQ.1) THEN
          WRITE(IUSUM,*) ' PLOT ACTIVE PARTICLES ONLY.'
        ELSE IF(IEPOPT.EQ.2) THEN
          WRITE(IUSUM,*) ' PLOT NORMALLY-TERMINATED PARTICLES ONLY.'
        ELSE IF(IEPOPT.EQ.3) THEN
          WRITE(IUSUM,*)
     1    ' PLOT ALL ACTIVE AND NORMALLY-TERMINATED PARTICLES.'
        END IF
      ELSE IF(ITYPE.EQ.5) THEN
        WRITE(IUSUM,*) '    TIMESERIES ANALYSIS.'
      END IF
      IF(ITYPE.LT.2 .OR. ITYPE.GT.5) RETURN
 
      CALL QMKTYP(MKOLD)
      CALL QMKSC(OLDMSF)
 
      TOTLEN=XMAX(NX)
 
      IF(ITYPE.EQ.5) THEN
        NN=1
        IF(NPSTPS.LT.0) THEN
          KSTP=0
          NEXT=1
        ELSE
          KSTP=ISPLOT(NN)
          NEXT= ISPLOT(NN+1)
        END IF
        IECHO=1
        KSTPO= -1
      END IF
 
      CALL SMKTYP(IEPTYP)
      CALL SMKSC(EPSCAL)
 
      IF(NCLR.GE.0) THEN
        KCLR=NCLR
        IF(KCLR.EQ.0) KCLR=1
        CALL PKCLR (KCLR)
      END IF
 
      IVER=0
      NSOLD=0
      IOLD=1
      KOUNT=0
      ISUM2=0
      ISUM3=0
      ISUM4=0
      ISUM5=0
      ISUM6=0
      ISUM7=0
10    CONTINUE
 
      IF(ITYPE.EQ.5) THEN
        CALL READTS(IU,IVER,ICMPCT,KNT,N,J,I,K,XX,YY,ZL,ZLL,TIME,
     1              NSTEP,NROW,NCOL,IERR)
C
      IF(IVER.LT.100) THEN
        WRITE(IUSUM,*) 'IGNORING INVALID TIMESERIES FILE.'
        RETURN
      END IF
C
      ELSE
        CALL GETEPT(IU,IVER,ICMPCT,IREV,IEPT,J,I,K,XX,YY,ZLL,NROW,
     1    NCOL,NLAY,NSTEP,IEPOPT,IB,IZONE,IPLOT,IPSKIP,IERR)
C
        IF(IVER.LT.100) THEN
          WRITE(IUSUM,*) 'IGNORING INVALID ENDPOINT FILE.'
          RETURN
        END IF
C
        IF(IERR.GT.1) THEN
          IF(IERR.EQ.2) THEN
            ISUM2=ISUM2+1
          ELSE IF(IERR.EQ.3) THEN
            ISUM3=ISUM3+1
          ELSE IF(IERR.EQ.4) THEN
            ISUM4=ISUM4+1
          END IF
          GO TO 10
        END IF
      END IF
 
C  QUIT THE LOOP IF AN END-OF-FILE WAS FOUND
      IF(IERR.EQ.1) GO TO 20
 
      IF(NSTEP.NE.NSOLD) THEN
        IF(ISS.EQ.0) THEN
          IF(IVIEW.NE.1) CALL CBFHED(BUFF,NCOL,NROW,NLAY,IUCBF,
     1       NSTEP,IERR,NUMTS,NPER,NSTEPF,NSTEPL,KKPER,KKSTP,1,IUSUM)
        ELSE
          DO 1 KK=1,NLAY
          DO 1 II=1,NROW
          DO 1 JJ=1,NCOL
1         BUFF(JJ,II,KK)=H(JJ,II,KK)
        END IF
        NSOLD=NSTEP
      END IF
 
      IF (IVIEW.EQ.1) THEN
        XPT=XX
        YPT=YY
        LSEC=K
      ELSE IF (IVIEW.EQ.2) THEN
        XPT=YY
        LSEC=J
        IF(IXYDIR.EQ.1) XPT= TOTLEN-XPT
        CALL ABZC(BUFF,ZTOP,ZBOT,ZMN,ZMX,NCOL,NROW,NLAY,NZDIM,
     1      LAYCON,IVIEW,IXTYPE,IGRID,IXYDIR,J,I,K,ZLL,XMIN,XMAX,
     2      NX,HDRY,HNOFLO,VEX,XPT,YPT)
      ELSE IF (IVIEW.EQ.3) THEN
        XPT=XX
        LSEC=I
        IF(IXYDIR.EQ.1) XPT= TOTLEN-XPT
        CALL ABZC(BUFF,ZTOP,ZBOT,ZMN,ZMX,NCOL,NROW,NLAY,NZDIM,
     1      LAYCON,IVIEW,IXTYPE,IGRID,IXYDIR,J,I,K,ZLL,XMIN,XMAX,
     2      NX,HDRY,HNOFLO,VEX,XPT,YPT)
      END IF
 
      ICK=0
      IF(XPT.GT.XR.OR.XPT.LT.XL) ICK=1
      IF(YPT.GT.YT.OR.YPT.LT.YB) ICK=1
      IF(IPROJ.EQ.1.AND.LSEC.NE.NSEC) ICK=1
 
C  IF THIS IS A TIMESERIES PLOT ...
      IF(ITYPE.EQ.5) THEN
      IF(KSTP.NE.KSTPO .AND. IECHO.EQ.1) THEN
        WRITE(IUSUM,1700) KSTP
        IECHO=0
      END IF
C
      IF (KNT.EQ.KSTP) THEN
        IF(ICK.EQ.0) CALL PLOTMK(1,XPT,YPT)
      ELSE IF (KNT.EQ.NEXT.AND.KNT.NE.0) THEN
        KSTPO=KSTP
        KSTP=NEXT
        IECHO=1
        IF(NCLR.EQ.0) THEN
          KCLR=KCLR+1
          CALL CYCLE (KCLR)
        END IF
        IF(NPSTPS.LT.0) THEN
          NEXT=KSTP+1
          IF(ICK.EQ.0) THEN
            CALL PLOTMK(1,XPT,YPT)
            KOUNT=KOUNT+1
          END IF
        ELSE
          NN=NN+1
          NEXT= ISPLOT(NN+1)
          IF(ICK.EQ.0) THEN
            CALL PLOTMK(1,XPT,YPT)
            KOUNT=KOUNT+1
          END IF
        END IF
      ELSE IF (KNT.GT.KSTP.AND.NEXT.EQ.0) THEN
        GO TO 20
      END IF
      GO TO 10
 
C  OTHERWISE, IF THIS IS AN ENDPOINT PLOT ...
      ELSE
        IF(ICK.EQ.1) THEN
          ISUM6=ISUM6+1
          GO TO 10
        END IF
 
        IF(IZONE.LE.1.AND.IEPT.EQ.0) THEN
          ISUM5=ISUM5+1
          GO TO 10
        END IF
 
        IF(NCLR.EQ.0) THEN
          KCLR=IZONE
          IF(IZONE.NE.IOLD) THEN
            CALL CYCLE (KCLR)
            IOLD=IZONE
          END IF
        END IF
 
        IF(IEPT.EQ.0) THEN
          IF(NCLR.EQ.0) THEN
            NSYM= MOD(IZONE,5)
            IF(NSYM.EQ.0) NSYM=5
            CALL SMKTYP(NSYM)
          END IF
        ELSE IF(IEPT.EQ.1 .AND. IPSKIP.EQ.1) THEN
          ISUM7=ISUM7+1
          GO TO 10
        END IF
 
        CALL PLOTMK(1,XPT,YPT)
        KOUNT=KOUNT+1
        GO TO 10
      END IF
 
 
20    CONTINUE
 
      CALL SMKTYP(MKOLD)
      CALL SMKSC(OLDMSF)
      KCLR=1
      CALL CYCLE(KCLR)
 
      IF(ITYPE.GE.2 .AND. ITYPE.LE.4) THEN
      WRITE(IUSUM,1000) KOUNT
      IF(ISUM2.GT.0) WRITE(IUSUM,1100) ISUM2
      IF(ISUM3.GT.0) WRITE(IUSUM,1200) ISUM3
      IF(ISUM4.GT.0) WRITE(IUSUM,1300) ISUM4
      IF(ISUM5.GT.0) WRITE(IUSUM,1400) ISUM5
      IF(ISUM6.GT.0) WRITE(IUSUM,1500) ISUM6
      IF(ISUM7.GT.0) WRITE(IUSUM,1600) ISUM7
      END IF
 
1000  FORMAT(1X,I6,' POINTS PLOTTED.')
1100  FORMAT(1X,I6,' POINTS SKIPPED BECAUSE OF ABNORMAL DISCHARGE')
1200  FORMAT(1X,I6,' POINTS SKIPPED BECAUSE THEY WERE ACTIVE')
1300  FORMAT(1X,I6,' POINTS SKIPPED BECAUSE THEY WERE TERMINATED')
1400  FORMAT(1X,I6,' POINTS SKIPPED BECAUSE IZONE = 1')
1500  FORMAT(1X,I6,' POINTS SKIPPED BECAUSE THEY WERE OUT OF RANGE')
1600  FORMAT(1X,I6,' POINTS SKIPPED BECAUSE THEY WERE NOT IN THE SPECIFI
     1ED ZONE')
1700  FORMAT(1X,'    TIME STEP ',I3,' WILL BE PLOTTED.')
      RETURN
      END
 
C***** SUBROUTINE *****
      SUBROUTINE GETEPT(IU,IVER,ICMPCT,IREV,IEPT,J,I,K,X,Y,ZLL,NROW,
     1  NCOL,NLAY,NSTEP,IEPOPT,IB,IZONE,IPLOT,IPSKIP,IERR)
      DIMENSION IB(NCOL,NROW,NLAY)
 
      IERR=0
      IPSKIP=0
      CALL READEP(IU,IVER,ICMPCT,IZL,JLAST,ILAST,KLAST,XLAST,YLAST,
     1 ZLLAST,T,XFRST,YFRST,ZLFRST,JFRST,IFRST,KFRST,IZF,NSFRST,IDCODE,
     2 TRLEAS,NSLAST,NCOL,NROW,IEOF)
 
C  RETURN IF END OF FILE ENCOUNTERED
      IF(IEOF.EQ.1) THEN
        IERR=1
        RETURN
      END IF
 
C  FIND OUT IF WE SHOULD SKIP OVER THIS PARTICLE
      IF(IDCODE.LT.0) THEN
        IERR=2
        RETURN
      ELSE IF(IDCODE.EQ.0 .AND. IEPOPT.EQ.2) THEN
        IERR=3
        RETURN
      ELSE IF(IDCODE.GT.0 .AND. IEPOPT.EQ.1) THEN
        IERR=4
        RETURN
      END IF
 
      IF(IEPT.EQ.0) THEN
        X=XFRST
        Y=YFRST
        ZLL=ZLFRST
        J=JFRST
        I=IFRST
        K=KFRST
        NSTEP=NSFRST
      ELSE
        X=XLAST
        Y=YLAST
        ZLL=ZLLAST
        J=JLAST
        I=ILAST
        K=KLAST
        NSTEP=NSLAST
      END IF
 
      IF(IREV.EQ.0) THEN
        IZONE=ABS(IB(JLAST,ILAST,KLAST))
      ELSE
        IZONE=ABS(IB(JFRST,IFRST,KFRST))
      END IF
 
      IF(IEPT.EQ.1 .AND. IPLOT.GT.0) THEN
        IF(IB(JLAST,ILAST,KLAST).NE.IPLOT) IPSKIP=1
      END IF
 
      RETURN
      END
 
C***** SUBROUTINE *****
      SUBROUTINE ABZAVE(H,HPREV,TREL,IDIR,ISS,ZT,ZB,ZMN,ZMX,NCOL,
     1 NROW,NLAY,NZDIM,LAYCON,IVIEW,IXTYPE,IGRID,IXYDIR,J,I,K,ZL,XMIN,
     2 XMAX,NX,HDRY,HNOFLO,VEX,XP,YP)
      DIMENSION H(NCOL,NROW,NLAY),HPREV(NCOL,NROW,NLAY),ZT(NZDIM),
     1 ZB(NZDIM),LAYCON(NLAY),XMIN(NX),XMAX(NX),ZMN(NLAY),ZMX(NLAY)
C
      IF(ISS.EQ.1 .OR. LAYCON(K).LE.0 .OR. IXTYPE.EQ.0) THEN
        CALL ABZC(H,ZT,ZB,ZMN,ZMX,NCOL,NROW,NLAY,NZDIM,LAYCON,IVIEW,
     1   IXTYPE,IGRID,IXYDIR,J,I,K,ZL,XMIN,XMAX,NX,HDRY,HNOFLO,VEX,
     2   XP,YP)
      ELSE
        CALL ABZC(H,ZT,ZB,ZMN,ZMX,NCOL,NROW,NLAY,NZDIM,LAYCON,IVIEW,
     1   IXTYPE,IGRID,IXYDIR,J,I,K,ZL,XMIN,XMAX,NX,HDRY,HNOFLO,VEX,
     2   XP,Y2)
        CALL ABZC(HPREV,ZT,ZB,ZMN,ZMX,NCOL,NROW,NLAY,NZDIM,LAYCON,IVIEW,
     1   IXTYPE,IGRID,IXYDIR,J,I,K,ZL,XMIN,XMAX,NX,HDRY,HNOFLO,VEX,
     2   XP,Y1)
        IF(IDIR.EQ.0) THEN
          YP= TREL*Y2 + (1.0-TREL)*Y1
        ELSE
          YP= TREL*Y1 + (1.0-TREL)*Y2
        END IF
      END IF
      RETURN
      END
 
C***** SUBROUTINE *****
      SUBROUTINE GETRLT(NPER,TBEGIN,NSTEP,TIME,PERLEN,TIMX,NUMTS,TREL,
     1                  IERR)
      DIMENSION PERLEN(NPER),TIMX(NPER),NUMTS(NPER)
      IERR=0
      T=TBEGIN
      KOUNT=0
      DO 10 KP=1,NPER
      NSTPS=NUMTS(KP)
      TMULT=TIMX(KP)
      PERL=PERLEN(KP)
      DO 10 KS=1,NSTPS
      KOUNT=KOUNT+1
      CALL STPSIZ(PERL,KS,NSTPS,TMULT,DT)
      T1=T
      T=T+DT
      IF(KOUNT.EQ.NSTEP) GO TO 20
10    CONTINUE
      IERR=1
      RETURN
20    CONTINUE
      TREL= (TIME-T1)/DT
      IF(TREL.LT.0.0) TREL=0.0
      IF(TREL.GT.1.0) TREL=1.0
      RETURN
      END
