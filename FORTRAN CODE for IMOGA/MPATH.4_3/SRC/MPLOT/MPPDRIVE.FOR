C MODPATH-PLOT Version 4.00 (V4, Release 3, 1-2002)
C  Changes to work with MODFLOW-2000
C
C MODPATH-PLOT Version 3.00 (V3, Release 2, 5-99)
C Changes:
C   No change since previous release: (V3, Release 1, 9-94)
C***** SUBROUTINES *****
C     DRIVER
C***********************
 
C***** SUBROUTINE *****
      SUBROUTINE DRIVER (IBOUND,XMX,XMN,DELR,YMX,YMN,DELC,ZBOT,ZTOP,
     1DELZ,ZMX,ZMN,HEAD,LAYCON,NCON,DELZCB,IBUFF,IUNIT,IBX,IGZ,
     2XLOC,YLOC,CLEV,BUFF,IUNAR,HNOFLO,HDRY,VER,CFGPTH,ZXT,ZXB,PARRAY,
     3ICB,HPREV,PERLEN,TIMX,NUMTS,IGZBUF,IBPZON,CDATA,IBRMAP,LAYCBD,
     4 ISSFLG)
C
C
      DIMENSION LAYCBD(200)
      CHARACTER*(*) VER,CFGPTH
      CHARACTER*30 COLNAM,LMESS(15)
      CHARACTER*50 TLEGND
      CHARACTER*132 SFILE1,SFILE2
      CHARACTER*80 LINE,FNAMS
      CHARACTER*16 TEXT
C
      COMMON /DRIVR/ NCOL,NROW,NLAY,NZDIM,NUNIT,NCBL,IGRID,IUMAIN,
     1 NLVMAX,NWAIT,IBATCH,IBYTES,ISS,NXDIM,NIGZ,NIUNAR,NPER,NPARY,
     2 MAXPTS
      COMMON /COLORS/
     1 ICO(20),ICYCL(20),CTR(0:255),CTG(0:255),CTB(0:255),NCYCL,NCTDEF,
     2 MCI
      COMMON /PAT/ NLTYPE,IACPAT,ICBPAT
      COMMON /COLNAM/ COLNAM(15)
      COMMON /SETFIL/ SFILE1,SFILE2
      COMMON /GEOL/ IGEOL(100),NGEOL
      COMMON /DMARKR/ IEPTYP,EPSCAL,MKIND
      COMMON /DFNAMS/ FNAMS(6)
 
      DIMENSION LAYCON(NLAY),NCON(NLAY),DELR(NCOL),DELC(NROW),DELZ(NLAY)
     1,DELZCB(NLAY),XMX(NCOL),YMX(NROW),ZTOP(NZDIM),ZBOT(NZDIM),
     2HEAD(NCOL,NROW,NLAY),IBOUND(NCOL,NROW,NLAY),XMN(NCOL),YMN(NROW),
     4IUNIT(NUNIT),IBUFF(NCOL,NROW,NLAY),ZMN(NLAY),ZMX(NLAY),
     5IBX(NXDIM,NLAY),IGZ(NIGZ),IUNAR(NIUNAR),BUFF(NCOL,NROW,NLAY),
     6XLOC(NCOL),YLOC(NROW),CLEV(NLVMAX),PARRAY(NPARY),ICB(NXDIM),
     7ZXB(NIGZ),ZXT(NIGZ),PERLEN(NPER),TIMX(NPER),NUMTS(NPER),
     8IGZBUF(NIGZ),IBPZON(NCOL,NROW,NLAY),CDATA(NCOL,NROW),
     9IBRMAP(NCOL,NROW),HPREV(NCOL,NROW,NLAY),ISSFLG(NPER)
 
      DIMENSION ISPLOT(51),LVSACT(4),WINLEG(4),NGUA(15)
      DIMENSION XBRDR(5),YBRDR(5)
      DIMENSION IARRAY(10),RARRAY(10)
C
      CHARACTER*80 FNAME,TITLE
      CHARACTER*79 MES
      CHARACTER*79 STRING
      DIMENSION LASF(13)
      DATA LASF/13*1/
 
      IUPTH=IUNAR(2)
      IUEPT=IUNAR(3)
      IUTIM=IUNAR(4)
      IUSUM=IUNAR(5)
      IULOG=IUNAR(6)
      IUDEV=IUNAR(7)
      IUDCF=IUNAR(21)
      ICNECT=IUNAR(10)
      IUIZP=IUNAR(13)
      IUCVAL=IUNAR(22)
 
C--- TURN OFF OPTION TO DRAW PAGE BORDER
      IBRDR=0
 
C--- SET LEGEND TO OFF FOR GRID UNIT ARRAY DATA
      LEGEND=0
 
C--- SET MAXIMUM NUMBER OF LEGEND ENTRIES TO 15
      NLMESS=15
 
C--- SET X & Y GRID DIRECTION FLAGS TO INDICATE +X AND +Y DIRECTIONS
      IXDIR=0
      IYDIR=0
 
C--- CALCULATE POINTERS USED TO PASS "PARRAY" TO SUBROUTINE "DXGRID"
        ISUM=1
      LP1=ISUM
        ISUM=ISUM+(2*MAXPTS+1)
      LP2=ISUM
        ISUM=ISUM+(2*MAXPTS+1)
      LP3=ISUM
        ISUM=ISUM+MAXPTS
      LP4=ISUM
        ISUM=ISUM+MAXPTS
      LP5=ISUM
        ISUM=ISUM+MAXPTS
      LP6=ISUM
C
      CALL GPARAM(6,ISILNT)
      MAXLVS=4
      IMDEV=0
C--- IF IMDEV=0 THE GKS ROUTINES <GSWKVP> (SET WORKSTATION VIEWPORT)
C--- AND <GSWKWN> (SET WORKSTATION WINDOW) ARE CALLED BY THE PROGRAM.
C--- OTHERWISE, THOSE ROUTINES ARE NOT CALLED AND DEFAULT DIMENSIONS
C--- ARE USED BY GKS. THE STANDARD VERSION OF THIS PROGRAM IS SET UP
C--- SO THAT IMDEV IS ALWAYS EQUAL TO 0. FOR SOME GKS SYSTEMS, IT MAY
C--- BE DESIRABLE TO SET IMDEV NOT EQUAL TO ZERO TO SUPPRESS CALLS TO
C--- THOSE GKS SUBROUTINES WHEN META FILE OUTPUT DEVICES ARE USED.
C
      DO 10 N=1,51
10    ISPLOT(N)=0
 
 
C---CHECK MAIN DATA FILE FOR KEYWORD DATA
C
C-----SET DEFAULT VALUES
C  READ IBOUND AND STARTING HEAD ARRAYS AS BY LAYER
      IXREAD=0
C  LENGTH UNITS ARE FEET
      JUNITS=1
C  PARTICLE COORDINATE FILE STRUCTURE
      ICMPCT=0
C  WATER TABLE DISPLAY IN CROSS SECTION (1 = SOLID LINE)
      IWTLIN=1
 
 
C-----READ LINE 2 OF MAIN DATA FILE AND SEARCH FOR KEYWORDS
      READ(IUMAIN,'(A)') LINE
      CALL UPCASE(LINE)
 
      IF(INDEX(LINE,'XSECTION') .NE. 0) IXREAD=1
      IF(NROW.GT.1) IXREAD=0
 
      IF(INDEX(LINE,'METERS') .NE. 0) JUNITS=2
 
      IF(INDEX(LINE,'COMPACT') .NE. 0) ICMPCT=1
      IF(INDEX(LINE,'BINARY') .NE. 0) ICMPCT=2
      IF(INDEX(LINE,'WT(OFF)') .NE. 0) IWTLIN=0
      IF(INDEX(LINE,'WT(DASHED)') .NE. 0) IWTLIN=2
      IF(INDEX(LINE,'WT(DOTTED)') .NE. 0) IWTLIN=3
 
 
C---READ IN LAYCON ARRAY
      CALL UREADI(LAYCON,NLAY,IUMAIN,IUSUM)
      IWTABL=0
      DO 15 K=1,NLAY
      IF(LAYCON(K).NE.0) THEN
        IWTABL=1
        IF(K.NE.1 .OR. LAYCON(K).NE.1) LAYCON(K)=3
      END IF
15    CONTINUE
 
 
C
      CALL MPRMPT('ENTER TITLE (80 CHARACTERS OR LESS):')
      CALL GETSTR(TITLE,0,'2.1.40')
C--- PICK A GRAPHICS OUTPUT DEVICE AND SET COLOR DATA IF NECESSARY
      CALL DEVICE (MODEL,KND,NWAIT,IWAIT,SFILE1,IUDEV,IUSUM,IBATCH)
      CALL SETNGS(IUDEV,IUSUM,SFILE1,SFILE2)
 
C-------------------------------------------------------------------------
      INDIS=IUNIT(1)
      CALL DIS2RP(INDIS,IUSUM,DELR,DELC,ZTOP,ZBOT,LAYCBD,NCON,
     1            PERLEN,NUMTS,TIMX,ISS,NCOL,NROW,NLAY,NPER,ISSFLG)
      REFTIM=0.0
      IF(ISS.NE.0) THEN
      IPER=1
      ISTP=1
      ELSE
      CALL MPRMPT('A TIME STEP MUST BE SPECIFIED FOR COMPUTING THE ACTIV
     1E GRID AND CONTOURS.')
      CALL MPRMPT('SELECT AN OPTION FOR SPECIFYING THE TIME STEP:')
      CALL MPRMPT('  1 = ENTER STRESS PERIOD AND TIME STEP DIRECTLY')
      CALL MPRMPT('  2 = ENTER A VALUE OF SIMULATION TIME')
      CALL GETI(1,IANS,3,1,2,'2.1.2A')
      IF(IANS.EQ.1) THEN
      CALL MPRMPT('ENTER: STRESS PERIOD & TIME STEP USED TO COMPUTE ACTI
     1VE GRID AND CONTOURS:')
      CALL GETI(2,IARRAY,0,0,0,'2.1.2')
      IPER=IARRAY(1)
      ISTP=IARRAY(2)
      ELSE
      CALL MPRMPT('ENTER: SIMULATION TIME AND UNITS CONVERSION FACTOR')
      CALL GETR(2,RARRAY,0,0.0,0.0,'2.1.2B')
      REFTIM=RARRAY(1)*RARRAY(2)
      IPER=0
      ISTP=0
      END IF
      END IF
C-------------------------------------------------------------------------
 
C  FIND OUT PLOT ORIENTATION
C
      CALL MPRMPT('WHAT IS THE ORIENTATION OF THE PLOT ?')
      CALL MPRMPT('  1 = MAP VIEW')
      CALL MPRMPT('  2 = TRUE CROSS SECTION ALONG A COLUMN')
      CALL MPRMPT('  3 = TRUE CROSS SECTION ALONG A ROW')
      CALL MPRMPT('  4 = NORMALIZED CROSS SECTION ALONG A COLUMN')
      CALL MPRMPT('  5 = NORMALIZED CROSS SECTION ALONG A ROW')
      CALL GETI(1,IVIEW,3,1,5,'2.1.6')
      IXTYPE=1
      IF(IVIEW.EQ.4) THEN
        IVIEW=2
        IXTYPE=0
      ELSE IF(IVIEW.EQ.5) THEN
        IVIEW=3
        IXTYPE=0
      END IF
C
      IXDIR=0
      IYDIR=0
      IF(IVIEW.EQ.2 .OR. IVIEW.EQ.3) THEN
        CALL MPRMPT('SELECT AN ORIENTATION FOR THE CROSS SECTION:')
        CALL MPRMPT('  1 = REGULAR')
        CALL MPRMPT('  2 = REVERSED')
        CALL GETI(1,IANS,3,1,2,'2.1.6A')
        IF(IANS.EQ.2 .AND. IVIEW.EQ.2) IYDIR=1
        IF(IANS.EQ.2 .AND. IVIEW.EQ.3) IXDIR=1
      END IF
 
C-------------------------------------------------------------------------
 
C  FIND OUT WHAT TYPE OF PLOT IT WILL BE
      CALL MPRMPT
     1('ENTER THE TYPE OF PLOT:')
      CALL MPRMPT
     1('    1 = PATHLINE PLOT')
      CALL MPRMPT
     1('    2 = STARTING LOCATIONS FROM FORWARD TRACKING ANALYSIS')
      CALL MPRMPT
     1('    3 = FINAL LOCATIONS FROM FORWARD TRACKING ANALYSIS')
      CALL MPRMPT
     1('    4 = FINAL LOCATIONS FROM BACKWARD TRACKING ANALYSIS')
      CALL MPRMPT
     1('    5 = TIME SERIES')
      CALL MPRMPT
     1('    6 = GRID ONLY')
 
      IF(IVIEW.EQ.1) THEN
        ICHOIC=7
        CALL MPRMPT
     1   ('    7 = CONTOUR PLOT ONLY')
      ELSE
        ICHOIC=6
      END IF
C
      CALL GETI(1,IANS,3,1,ICHOIC,'2.1.3')
C
      IF(IANS.LE.5) THEN
        ITYPE=IANS
      ELSE IF(IANS.EQ.6) THEN
        ITYPE=8
      ELSE IF(IANS.EQ.7) THEN
        ITYPE=6
      END IF
 
 
C-------------------------------------------------------------------------
C  FIND OUT HOW TO DRAW AND SHADE G
C
      CALL MPRMPT('SELECT A OPTION FOR DRAWING GRID BOUNDARIES:')
      CALL MPRMPT('  1 = DRAW ACTIVE GRID BOUNDARY ONLY')
      CALL MPRMPT('  2 = DRAW FULL GRID BOUNDARY ONLY')
      CALL MPRMPT('  3 = DRAW ACTIVE GRID AND FULL GRID BOUNDARIES')
      CALL GETI(1,IOPTGR,3,1,3,'2.1.4')
      MES= 'DRAW INTERIOR GRID LINES ?'
      CALL YESNO (MES,IOPTIL,'2.1.45')
C
 
C  IF NO GRID UNIT FILE WAS SPECIFIED, RESET ISGZ TO 0
      IF(IUNIT(15).EQ.0) THEN
        ISGZ=0
C  OTHERWISE, FIND OUT ABOUT HOW TO DISPLAY GRID UNIT DATA
      ELSE
        CALL MPRMPT('SELECT OPTION FOR DISPLAYING GRID UNIT DATA:')
        CALL MPRMPT('  1 = DO NOT DISPLAY GRID UNITS')
        CALL MPRMPT('  2 = OUTLINE GRID UNITS')
        CALL MPRMPT('  3 = SOLID SHADING')
        CALL MPRMPT('  4 = HATCH SHADING')
        CALL GETI(1,ISGZ,3,1,4,'2.1.45A')
        ISGZ=ISGZ-1
        MES= 'DISPLAY A LEGEND FOR THE GRID UNIT ARRAY DATA ?'
        CALL YESNO (MES,LEGEND,'2.1.45B')
        IF(ISGZ.LT.2) LEGEND=0
      END IF
 
      CALL MPRMPT('SELECT OPTION FOR SHADING INACTIVE CELLS:')
      CALL MPRMPT('  1 = DO NOT SHADE')
      CALL MPRMPT('  2 = SOLID SHADING')
      CALL MPRMPT('  3 = HATCH SHADING')
      CALL GETI(1,IANS,3,1,3,'2.1.45B')
      IF(IANS.EQ.1) THEN
        IACPAT=0
      ELSE IF(IANS.EQ.2) THEN
        IACPAT=7
      ELSE IF(IANS.EQ.3) THEN
        IF(IACPAT.LT.1 .OR. IACPAT.GT.6) IACPAT=0
      END IF
 
      IF(IVIEW.GT.1) THEN
       CALL MPRMPT('SELECT OPTION FOR SHADING QUASI-3D CONFINING BEDS:')
       CALL MPRMPT('  1 = DO NOT SHADE')
       CALL MPRMPT('  2 = SOLID SHADING')
       CALL MPRMPT('  3 = HATCH SHADING')
       CALL GETI(1,IANS,3,1,3,'2.1.45C')
        IF(IANS.EQ.1) THEN
          ICBPAT=0
        ELSE IF(IANS.EQ.2) THEN
          ICBPAT=7
        ELSE IF(IANS.EQ.3) THEN
          IF(ICBPAT.LT.1 .OR. ICBPAT.GT.6) ICBPAT=0
        END IF
      END IF
 
      LAYGD=1
      LAYGUA=1
      IROWGD=1
      JCOLGD=1
      IF(IVIEW.EQ.1 .AND. NLAY.GT.1) THEN
      CALL MPRMPT
     1('WHAT LAYER SHOULD BE USED WHEN DRAWING THE ACTIVE GRID ?')
      CALL GETI(1,LAYGD,3,1,NLAY,'2.1.5')
      IF(ISGZ.NE.0) THEN
      CALL MPRMPT
     1('WHAT LAYER SHOULD BE USED WHEN PLOTTING DATA FROM GRID UNIT ARRA
     2Y ?')
      CALL GETI(1,LAYGUA,3,1,NLAY,'2.1.7')
      END IF
C
      ELSE IF(IVIEW.EQ.2 .AND. NCOL.GT.1) THEN
      CALL MPRMPT
     1('WHAT COLUMN SHOULD BE USED WHEN DRAWING THE ACTIVE GRID ?')
      CALL GETI(1,JCOLGD,3,1,NCOL,'2.1.5')
C
      ELSE IF(IVIEW.EQ.3 .AND. NROW.GT.1) THEN
      CALL MPRMPT
     1('WHAT ROW SHOULD BE USED WHEN DRAWING THE ACTIVE GRID ?')
      CALL GETI(1,IROWGD,3,1,NROW,'2.1.5')
      END IF
 
 
C  FIND OUT ABOUT PLOTTING BY PROJECTION OR BY THE SLICE
C
C-----FOR PLOT TYPES 1, 2, 3, 4, 5, AND 8 ...
      IF(ITYPE.NE.6) THEN
C
      LAYER=1
      IIPRJ=0
      IF(IVIEW.EQ.1.AND.NLAY.EQ.1) THEN
      IIPRJ=1
      LAYER=1
      IPROJ=0
      ELSE IF(IVIEW.EQ.2.AND.NCOL.EQ.1) THEN
      IIPRJ=1
      JCOL=1
      IPROJ=0
      ELSE IF(IVIEW.EQ.3.AND.NROW.EQ.1) THEN
      IIPRJ=1
      IROW=1
      IPROJ=0
      END IF
 
 
      IF(IIPRJ.EQ.0 .AND. ITYPE.NE.8) THEN
        CALL MPRMPT('WHAT DATA SHOULD BE PLOTTED ?')
        CALL MPRMPT('  1 = PLOT ALL DATA BY PROJECTION')
        CALL MPRMPT('  2 = ONLY PLOT DATA WITHIN A 2-D SLICE')
        CALL GETI(1,IPROJ,3,1,2,'2.1.8')
        IPROJ=IPROJ-1
      ELSE IF(ITYPE.EQ.8) THEN
        IPROJ=0
      END IF
 
 
      IF(IPROJ.GT.0) THEN
      IF(IVIEW.EQ.1) THEN
        CALL MPRMPT('ALONG WHAT LAYER SHOULD THE 2D SLICE BE TAKEN ?')
        CALL GETI(1,LAYER,3,1,NLAY,'2.1.9')
      ELSE IF (IVIEW.EQ.2) THEN
        CALL MPRMPT('ALONG WHAT COLUMN SHOULD THE 2D SLICE BE TAKEN ?')
        CALL GETI(1,JCOL,3,1,NCOL,'2.1.11')
      ELSE IF (IVIEW.EQ.3) THEN
        CALL MPRMPT('ALONG WHAT ROW SHOULD THE 2D SLICE BE TAKEN ?')
        CALL GETI(1,IROW,3,1,NROW,'2.1.13')
      END IF
      END IF
 
      END IF
 
 
C---BEGIN BLOCK 2 : PATHLINE COMPUTATION INFORMATION
C
      IF(ITYPE.EQ.1) THEN
      CALL MPRMPT('WERE THE FLOWLINES GENERATED BY FORWARD OR BACKWARD T
     `RACKING ?')
      CALL MPRMPT('   1 = FORWARD')
      CALL MPRMPT('   2 = BACKWARD')
      CALL GETI(1,IDIR,3,1,2,'2.1.14')
      IDIR=IDIR-1
      IF (IDIR.EQ.0) THEN
      MES= 'DO YOU WANT TO SKIP OVER PATH LINES THAT DISCHARGE IN ZONE 1
     1 ?'
      CALL YESNO (MES,ISKIP,'2.1.46')
      END IF
      MES= 'DO YOU WANT TO PLOT POINTS AT SPECIFIED TIME INTERVALS ?'
      CALL YESNO (MES,IPTS,'2.1.47')
      MES= 'DO YOU WANT TO STOP DRAWING PATH LINES AT A SPECIFIED TIME?'
      CALL YESNO (MES,IANS,'2.1.48')
      TMAX= 1.0E+30
      IF (IANS.EQ.1) THEN
      CALL MPRMPT(
     1'ENTER: THE TIME, AND A FACTOR FOR CONVERTING TO UNITS USED IN THE
     1 MODEL')
      CALL GETR(2,RARRAY,0,0.,0.,'2.1.37')
      TMAX=RARRAY(1)
      UCFAC=RARRAY(2)
      TMAX= 1.00001*TMAX*UCFAC
      END IF
      END IF
C---END BLOCK 2
 
 
C---BEGIN BLOCK 3 : ENDPOINT PLOT INFORMATION
 
      IF(ITYPE.EQ.2 .OR. ITYPE.EQ.3 .OR. ITYPE.EQ.4) THEN
        CALL MPRMPT('SELECT AN OPTION FOR SCREENING ENDPOINTS:')
        CALL MPRMPT
     1('  1 = PLOT ONLY THOSE PARTICLES THAT ARE STILL ACTIVE')
        CALL MPRMPT
     1('  2 = PLOT ONLY THOSE PARTICLES THAT TERMINATED NORMALLY')
        CALL MPRMPT
     1('  3 = PLOT BOTH ACTIVE AND NORMALLY-TERMINATED PARTICLES')
        CALL GETI(1,IEPOPT,3,1,3,'2.1.15A')
      END IF
 
      IPLOT=0
      IF(ITYPE.EQ.3.OR.ITYPE.EQ.4) THEN
      MES= 'PLOT ONLY THOSE PARTICLES WHOSE FINAL LOCATIONS ARE IN A SPE
     1CIFIC ZONE ?'
      CALL YESNO (MES,IANS,'2.1.49')
      IF(IANS.EQ.1) THEN
      CALL MPRMPT('ENTER THE ZONE CODE:')
      CALL GETI(1,IPLOT,1,0,0,'2.1.15')
      END IF
      END IF
C---END BLOCK 3
 
 
C---BEGIN BLOCK 4 : ENDPOINT FILE INFORMATION
      IF(ITYPE.LT.6) THEN
      IF(FNAMS(4).EQ.' ') THEN
      CALL MPRMPT
     1('ENTER NAME OF ENDPOINT FILE (<CR> = USE DEFAULT FILE NAME):')
      CALL GETSTR(FNAME,-1,'2.1.41')
      ELSE
        FNAME=FNAMS(4)
      END IF
C
      IF(ICMPCT.LT.2) THEN
        IF(FNAME.EQ.' ') FNAME='endpoint'
        IUEPT2= IUEPT
      ELSE IF(ICMPCT.EQ.2) THEN
        IF(FNAME.EQ.' ') FNAME='endpoint.bin'
        IUEPT2= -IUEPT
      END IF
C
      CALL OPNFIL (IUEPT2,FNAME,1,IUSUM,ISILNT,1)
      IF(FNAMS(4).EQ.' ') CALL PUTSTR(FNAME)
      END IF
 
C---END BLOCK 4
 
 
C---BEGIN BLOCK 5 : PATHLINE FILE INFORMATION
      IF(ITYPE.EQ.1) THEN
      IF(FNAMS(5).EQ.' ') THEN
      CALL MPRMPT
     1('ENTER NAME OF PATHLINE FILE (<CR> = USE DEFAULT FILE NAME):')
      CALL GETSTR(FNAME,-1,'2.1.42')
      ELSE
        FNAME=FNAMS(5)
      END IF
C
      IF(ICMPCT.LT.2) THEN
        IF(FNAME.EQ.' ') FNAME='pathline'
        IUPTH2= IUPTH
      ELSE IF(ICMPCT.EQ.2) THEN
        IF(FNAME.EQ.' ') FNAME='pathline.bin'
        IUPTH2= -IUPTH
      END IF
C
      CALL OPNFIL (IUPTH2,FNAME,1,IUSUM,ISILNT,1)
      IF(FNAMS(5).EQ.' ') CALL PUTSTR(FNAME)
C
      IF(IBYTES.EQ.1) THEN
        IRECL=4
      ELSE
        IRECL=1
      END IF
      OPEN(IUNAR(13),ACCESS='DIRECT',FORM='UNFORMATTED',
     1     STATUS='SCRATCH',RECL=IRECL)
C
      END IF
C---END BLOCK 5
 
 
C---BEGIN BLOCK 6 : TIME SERIES FILE INFORMATION
      IF(ITYPE.EQ.5) THEN
      IF(FNAMS(6).EQ.' ') THEN
      CALL MPRMPT
     1('ENTER NAME OF TIMESERIES FILE (<CR> = use default file name):')
      CALL GETSTR(FNAME,-1,'2.1.43')
      ELSE
        FNAME=FNAMS(6)
      END IF
C
      IF(ICMPCT.LT.2) THEN
        IF(FNAME.EQ.' ') FNAME='timesers'
        IUTIM2= IUTIM
      ELSE IF(ICMPCT.EQ.2) THEN
        FNAME='timesers.bin'
        IUTIM2= -IUTIM
      END IF
C
      CALL OPNFIL (IUTIM2,FNAME,1,IUSUM,ISILNT,1)
      IF(FNAMS(6).EQ.' ') CALL PUTSTR(FNAME)
C
      CALL MPRMPT('HOW MANY TIME STEPS DO YOU WANT TO PLOT ?')
      CALL MPRMPT('  (YOU MAY PLOT UP TO 50 TIME STEPS)')
      CALL MPRMPT('  (TO PLOT ALL OF THE TIME STEPS, ENTER A NEGATIVE NU
     1MBER)')
      CALL GETI(1,NPSTPS,0,0,0,'2.1.16')
C
      IF(NPSTPS.GT.0) THEN
      CALL MPRMPT('ENTER THE TIME STEP NUMBERS THAT YOU WANT TO PLOT:')
      CALL GETI(NPSTPS,ISPLOT,0,0,0,'2.1.17')
      END IF
C
      END IF
C---END BLOCK 6
 
 
C---BEGIN BLOCK 7 : OPEN COMPOSITE BUDGET FILE, IF NECESSARY
C
C---ONLY OPEN A CBF IF SIMULATION IS A TRANSIENT, TRUE CROSS SECTIONAL
C   PLOT OF PATHLINES OR TIMESERIES POINTS
      IUCBF=0
      IF(ISS.EQ.0 .AND. IXTYPE.GT.0 .AND. IVIEW.GT.1
     1   .AND. IWTABL.EQ.1) THEN
        IF(ITYPE.LE.5) THEN
          IF(IBYTES.EQ.1) THEN
            IRECL= 4*(NCOL+1)
          ELSE
            IRECL= NCOL+1
          END IF
          IF(FNAMS(1).EQ.' ') THEN
          CALL MPRMPT('ENTER NAME OF COMPOSITE BUDGET FILE (CBF):')
          CALL GETSTR(FNAME,-1,'2.1.55')
          IF(FNAME.EQ.' ') GO TO 5000
          ELSE
            FNAME=FNAMS(1)
          END IF
          OPEN(IUNAR(18),FILE=FNAME,ERR=5000,STATUS='OLD',
     1         ACCESS='DIRECT',FORM='UNFORMATTED',RECL=IRECL)
          GO TO 5001
5000      WRITE(IUSUM,*)
     1     'ERROR OPENING CBF FILE. FILE MAY NOT EXIST. STOP.'
          STOP
5001      CONTINUE
          IF(FNAMS(1).EQ.' ') CALL PUTSTR(FNAME)
          IUCBF=IUNAR(18)
        END IF
      END IF
C---END BLOCK 7
 
C
C  READ MODPATH DATA SET
C
      IF(ISILNT.NE.1) WRITE(*,*) ' READING MODPATH-PLOT DATA FILES...'
 
C  SET VALUES OF NX AND ISLICE DEPENDING ON THE PLOT ORIENTATION
      IF(IVIEW.EQ.1) THEN
        NX=NCOL
        ISLICE=LAYGUA
      ELSE IF(IVIEW.EQ.2) THEN
        NX=NROW
        ISLICE=JCOLGD
      ELSE IF(IVIEW.EQ.3) THEN
        NX=NCOL
        ISLICE=IROWGD
      END IF
 
 
      CALL DATIN (LAYCON,NCON,BUFF,IBUFF,HEAD,XMX,XMN,YMX,YMN,DELR,
     1DELC,DELZ,DELZCB,ZTOP,ZBOT,ZMN,ZMX,XLOC,YLOC,IBOUND,
     2IUNIT,NCOL,NROW,NLAY,NUNIT,NZDIM,IGRID,NCBL,IUMAIN,IUSUM,IPER,
     3ISTP,IVIEW,ZXT,ZXB,IBX,IGZ,NIGZ,NX,IXTYPE,IXDIR,IYDIR,IUCBF,
     4PERLEN,TIMX,NUMTS,NPER,ISS,HDRY,HNOFLO,IXREAD,ISLICE,IBPZON,
     5ITYPE,LMESS,NLMESS,NGUA,TLEGND,REFTIM,TBEGIN)
 
      IF(ISILNT.NE.1) THEN
      WRITE(*,*) ' '
      WRITE(*,9900) NCOL,NROW,NLAY
9900  FORMAT
     1(1X,'OVERALL GRID DIMENSIONS ARE: ',I3,' COLUMNS, ',I3,' ROWS,',
     2I3,' LAYERS')
      WRITE(*,*) ' '
      END IF
 
 
C---BEGIN BLOCK 8 : PLOT DIMENSIONS AND SCALING INFORMATION
C
C-----IF PLOT IS A MAP VIEW...
C
      IF(IVIEW.EQ.1) THEN
      CALL MPRMPT('ENTER RANGE OF GRID COORDINATES FOR THIS PLOT:')
      CALL MPRMPT('     MIN COLUMN, MAX COLUMN, MIN ROW, MAX ROW')
      CALL MPRMPT('             ( BLANK LINE = PLOT FULL GRID)')
      CALL GETSTR(STRING,-1,'2.1.18')
        JMIN=1
        JMAX=NCOL
        IMIN=1
        IMAX=NROW
      IF(STRING.NE.' ') THEN
        LSTRG= LEN(STRING)
        ICOL=1
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,JMIN,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) JMIN=1
        IF(ISTART.EQ.LSTRG) GO TO 21
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,JMAX,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) JMAX=NCOL
        IF(ISTART.EQ.LSTRG) GO TO 21
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,IMIN,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) IMIN=1
        IF(ISTART.EQ.LSTRG) GO TO 21
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,IMAX,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) IMAX=NROW
21      CONTINUE
      END IF
      IF (JMAX.LT.1.OR.JMAX.GT.NCOL) JMAX=NCOL
      IF (IMAX.LT.1.OR.IMAX.GT.NROW) IMAX=NROW
      WRITE(STRING,'(4I5)') JMIN,JMAX,IMIN,IMAX
      CALL PUTSTR(STRING)
      XMIN= XMN(JMIN)
      XMAX= XMX(JMAX)
      IMINX= NROW-IMAX+1
      IMAXX= NROW-IMIN+1
      YMIN= YMN(IMINX)
      YMAX= YMX(IMAXX)
      VEX=1.0E+0
 
C-----ELSE IF PLOT IS A CROSS SECTION ALONG A COLUMN...
C
      ELSE IF(IVIEW.EQ.2) THEN
      CALL MPRMPT('ENTER RANGE OF GRID COORDINATES FOR THIS PLOT:')
      CALL MPRMPT('     MIN ROW, MAX ROW, MIN LAYER, MAX LAYER')
      CALL MPRMPT('             ( BLANK LINE = PLOT FULL GRID)')
      CALL GETSTR(STRING,-1,'2.1.19')
        IMIN=1
        IMAX=NROW
        KMIN=1
        KMAX=NLAY
      IF(STRING.NE.' ') THEN
        LSTRG= LEN(STRING)
        ICOL=1
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,IMIN,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) IMIN=1
        IF(ISTART.EQ.LSTRG) GO TO 22
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,IMAX,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) IMAX=NROW
        IF(ISTART.EQ.LSTRG) GO TO 22
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,KMIN,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) KMIN=1
        IF(ISTART.EQ.LSTRG) GO TO 22
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,KMAX,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) KMAX=NLAY
22      CONTINUE
      END IF
      IF (IMAX.LT.1.OR.IMAX.GT.NROW) IMAX=NROW
      IF (KMAX.LT.1.OR.KMAX.GT.NLAY) KMAX=NLAY
      WRITE(STRING,'(4I5)') IMIN,IMAX,KMIN,KMAX
      CALL PUTSTR(STRING)
      CALL MPRMPT('WHAT IS THE VERTICAL EXAGGERATION ?')
      CALL GETR(1,VEX,1,0.,0.,'2.1.38')
C
C  CALCULATE IMINX AND IMAXX TO ACCOUNT FOR REVERSED GRID, IF NECESSARY
      IF(IYDIR.EQ.0) THEN
        IMINX= NROW-IMAX+1
        IMAXX= NROW-IMIN+1
      ELSE
        IMINX= IMIN
        IMAXX= IMAX
      END IF
C
C  FIND BOUNDING RECTANGLE AND APPLY VERTICAL EXAGGERATION FACTOR
      CALL BRECT(NROW,NLAY,IMINX,IMAXX,KMIN,KMAX,YMN,YMX,
     1  ZXT,ZXB,YMIN,YMAX,ZMIN,ZMAX,ZBOT,ZTOP,NZDIM,VEX)
 
 
C-----ELSE IF PLOT IS A CROSS SECTION ALONG A ROW...
C
      ELSE IF(IVIEW.EQ.3) THEN
      CALL MPRMPT('ENTER RANGE OF GRID COORDINATES FOR THIS PLOT:')
      CALL MPRMPT('     MIN COLUMN, MAX COLUMN, MIN LAYER, MAX LAYER')
      CALL MPRMPT('             ( BLANK LINE = PLOT FULL GRID)')
      CALL GETSTR(STRING,-1,'2.1.22')
        JMIN=1
        JMAX=NCOL
        KMIN=1
        KMAX=NLAY
      IF(STRING.NE.' ') THEN
        LSTRG= LEN(STRING)
        ICOL=1
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,JMIN,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) JMIN=1
        IF(ISTART.EQ.LSTRG) GO TO 23
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,JMAX,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) JMAX=NCOL
        IF(ISTART.EQ.LSTRG) GO TO 23
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,KMIN,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) KMIN=1
        IF(ISTART.EQ.LSTRG) GO TO 23
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,KMAX,RDUMMY,-1,0)
        IF(STRING(LSTRG:LSTRG).EQ.'E' .OR. ISTART.EQ.LSTRG) KMAX=NLAY
23      CONTINUE
      END IF
      IF (JMAX.LT.1.OR.JMAX.GT.NCOL) JMAX=NCOL
      IF (KMAX.LT.1.OR.KMAX.GT.NLAY) KMAX=NLAY
      WRITE(STRING,'(4I5)') JMIN,JMAX,KMIN,KMAX
      CALL PUTSTR(STRING)
      CALL MPRMPT('WHAT IS THE VERTICAL EXAGGERATION ?')
      CALL GETR(1,VEX,1,0.,0.,'2.1.39')
C
C  CALCULATE JMINX AND JMAXX TO ACCOUNT FOR REVERSED GRID, IF NECESSARY
      IF(IXDIR.EQ.1) THEN
        JMINX= NCOL-JMAX+1
        JMAXX= NCOL-JMIN+1
      ELSE
        JMINX= JMIN
        JMAXX= JMAX
      END IF
C
C  FIND BOUNDING RECTANGLE AND APPLY VERTICAL EXAGGERATION FACTOR
      CALL BRECT(NCOL,NLAY,JMINX,JMAXX,KMIN,KMAX,XMN,XMX,
     1  ZXT,ZXB,XMIN,XMAX,ZMIN,ZMAX,ZBOT,ZTOP,NZDIM,VEX)
 
      END IF
C---END BLOCK 8
 
 
C
C  CHANGE ZONE CODES IN IBOUND ARRAY
C
      IF (ITYPE.LT.5) THEN
      MES= 'DO YOU WANT TO CHANGE ANY OF THE ZONE CODES IN THE IBOUND AR
     1RAY ?'
      CALL YESNO (MES,IANS,'2.1.50')
      IF (IANS.EQ.1) THEN
40    CALL MPRMPT('WHAT TYPE OF CHANGE DO YOU WANT TO MAKE ?')
      CALL MPRMPT('   1 = CHANGE AN ENTIRE LAYER')
      CALL MPRMPT('   2 = CHANGE AN INDIVIDUAL CELL')
      CALL MPRMPT('   3 = CHANGE ALL CELLS IN A BLOCK OF CELLS')
      CALL GETI(1,IANS,3,1,3,'2.1.24')
      IF(IANS.EQ.1) THEN
      CALL MPRMPT('ENTER THE LAYER NUMBER:')
      CALL GETI(1,NLAYER,3,1,NLAY,'2.1.25')
      CALL MPRMPT('ENTER THE NEW ZONE CODE:')
      CALL GETI(1,NUM,1,1,0,'2.1.26')
      DO 50  I=1,NROW
      DO 50  J=1,NCOL
      ITEMP=IBPZON(J,I,NLAYER)
      IF(ITEMP.NE.0) THEN
      IBPZON(J,I,NLAYER)=NUM
      IF(ITEMP.LT.0) IBPZON(J,I,NLAYER)= -IBPZON(J,I,NLAYER)
      END IF
50    CONTINUE
      ELSE IF (IANS.EQ.2) THEN
      CALL MPRMPT('ENTER THE CELL INDICES:  J  I  K')
      CALL GETI(3,IARRAY,0,0,0,'2.1.27')
      J=IARRAY(1)
      I=IARRAY(2)
      K=IARRAY(3)
      CALL MPRMPT('ENTER THE NEW ZONE CODE:')
      CALL GETI(1,NUM,1,1,0,'2.1.28')
      ITEMP=IBPZON(J,I,K)
      IF(ITEMP.NE.0) THEN
      IBPZON(J,I,K)=NUM
      IF(ITEMP.LT.0) IBPZON(J,I,K)= -IBPZON(J,I,K)
      END IF
      ELSE IF (IANS.EQ.3) THEN
      CALL MPRMPT('ENTER THE BOUNDARIES OF THE BLOCK OF CELLS:')
      CALL MPRMPT('    MIN COLUMN, MAX COLUMN, MIN ROW, MAX ROW, MIN LAY
     1ER, MAX LAYER')
      CALL GETI(6,IARRAY,0,0,0,'2.1.29')
      JJ1=IARRAY(1)
      JJ2=IARRAY(2)
      II1=IARRAY(3)
      II2=IARRAY(4)
      KK1=IARRAY(5)
      KK2=IARRAY(6)
      IF (JJ2.LT.1.OR.JJ2.GT.NCOL) JJ2=NCOL
      IF (II2.LT.1.OR.II2.GT.NROW) II2=NROW
      IF (KK2.LT.1.OR.KK2.GT.NLAY) KK2=NLAY
      CALL MPRMPT('ENTER THE NEW ZONE CODE:')
      CALL GETI(1,NUM,1,1,0,'2.1.30')
      DO 60  K=KK1,KK2
      DO 60  I=II1,II2
      DO 60  J=JJ1,JJ2
      ITEMP=IBPZON(J,I,K)
      IF(ITEMP.NE.0) THEN
      IBPZON(J,I,K)=NUM
      IF(ITEMP.LT.0) IBPZON(J,I,K)= -IBPZON(J,I,K)
      END IF
60    CONTINUE
      END IF
      MES= 'DO YOU WANT TO CHANGE SOME MORE ZONE CODES ?'
      CALL YESNO (MES,IANS,'2.1.51')
      IF (IANS.EQ.1) GO TO 40
      END IF
      END IF
 
 
C---IF PLOT IS A MAP VIEW OR A NORMALIZED CROSS SECTION, ZERO OUT IBOUND IN
C   CELLS THAT ARE DRY DURING THE SPECIFIED TIME STEP
      IF(IVIEW.EQ.1 .OR. IXTYPE.EQ.0) THEN
        DO 61 K=1,NLAY
        IF(LAYCON(K).GT.0) THEN
          DO 62 I=1,NROW
          DO 62 J=1,NCOL
          IF(HEAD(J,I,K).EQ.HDRY) IBOUND(J,I,K)=0
62        CONTINUE
        END IF
61      CONTINUE
      END IF
 
C
      IF(ITYPE.LE.5) THEN
      CALL PUTSCR(' ')
      CALL PUTSCR('AVAILABLE COLORS ARE:')
      MCII=MCI
      IF(MCII.GT.8) MCII=8
      DO 75 N=1,MCII
      N2=N+8
      IF(N2.GT.8 .AND. N2.LE.MCI) THEN
      WRITE(STRING,9500) N,COLNAM(N),N2,COLNAM(N2)
9500  FORMAT(1X,'  ',I2,' = ',A30,'  ',I2,' = ',A30)
      ELSE
      WRITE(STRING,9501) N,COLNAM(N)
9501  FORMAT(1X,'  ',I2,' = ',A30)
      END IF
      CALL PUTSCR(STRING)
75    CONTINUE
      CALL PUTSCR(' ')
 
      CALL MPRMPT
     1('SELECT A COLOR FOR PLOTTING PATHLINES AND POINTS:')
      CALL MPRMPT
     1('      (ENTER "0" TO CYCLE THROUGH COLORS)')
      CALL MPRMPT
     1('      (ENTER A BLANK LINE TO FORCE BLACK AND WHITE PLOT)')
      CALL GETSTR(STRING,0,'2.1.52')
      IF(STRING.EQ.' ') THEN
        IF(NLTYPE.LE.0 .OR. NLTYPE.GT.3) THEN
          NCLR= -4
        ELSE
          NCLR= -NLTYPE
        END IF
        KONCLR=1
      ELSE
        ICOL=1
        CALL URWORD(STRING,ICOL,ISTART,ISTOP,2,NCLR,RDUMMY,IUSUM,0)
        KONCLR= ICO(13)
      END IF
C
      ELSE
        NCLR=1
        KONCLR=ICO(13)
      END IF
 
C
      IF(IVIEW.EQ.1.AND.ITYPE.NE.8) THEN
      IUDD=0
      IF(IUNIT(10).NE.0 .AND. IUNIT(14).NE.0) THEN
      WRITE(IUSUM,*)
     1'BOTH UNFORMATTED AND FORMATTED DRAWDOWN FILES WERE SPECIFIED. STO
     2P'
      STOP
      END IF
      IF(IUNIT(10).NE.0) THEN
      IUDD = -IUNIT(10)
      ELSE IF(IUNIT(14).NE.0) THEN
      IUDD = IUNIT(14)
      END IF
      CALL CONINP(ICNTOR,NCOL,NROW,NLAY,JMIN,JMAX,IMIN,IMAX,HEAD,
     1  IBOUND,NLVMAX,NLEVS,KLABEL,NLABEL,LFIRST,CLEV,IUDD,
     2  IUNIT(11),IPER,ISTP,CDATA,IUSUM,IUCVAL,FNAMS(3),
     3  HNOFLO,HDRY)
      ELSE
      ICNTOR=0
      END IF
C
      IMISC=0
      IF(IVIEW.EQ.1) THEN
      IF(FNAMS(2).EQ.' ') THEN
        CALL MPRMPT
     1    ('SPECIFY THE NAME OF A DRAWING COMMANDS FILE:')
        CALL MPRMPT('( <CR> = NO DRAWING COMMANDS FILE )')
        CALL GETSTR(FNAME,-1,'2.1.44')
        IF(FNAME.NE.' ') THEN
          CALL OPNFIL(IUDCF,FNAME,1,IUSUM,ISILNT,3)
          IMISC=1
        END IF
        CALL PUTSTR(FNAME)
      ELSE
        CALL OPNFIL(IUDCF,FNAMS(2),1,IUSUM,ISILNT,3)
        IMISC=1
      END IF
      END IF
C
      CALL MPRMPT('SELECT AN OPTION FOR SIZING THE PLOT:')
      CALL MPRMPT('  1 = DRAW PLOT TO AN EXACT MAP SCALE')
      CALL MPRMPT('  2 = SCALE PLOT AUTOMATICALLY')
      CALL GETI(1,ISCTYP,3,1,2,'2.1.53')
      ISCTYP=ISCTYP-1
 
      PSCFAC=1.0
      MAPSCA=0
      IF(ISCTYP.EQ.1) THEN
        CALL MPRMPT
     1('ENTER A SCALING FACTOR BETWEEN 0.05 AND 1 TO SIZE THE PLOT:')
        CALL MPRMPT('  (1= MAXIMUM SIZE POSSIBLE FOR OUTPUT DEVICE)')
        CALL GETR(1,PSCFAC,3,0.05,1.0,'2.1.53A')
      ELSE
        CALL MPRMPT
     1('SPECIFY A MAP SCALE FOR THE PLOT (1:M)')
        CALL MPRMPT('  ENTER THE VALUE M :')
        CALL GETR(1,SCMAP,0,0.0,0.0,'2.1.53B')
        IF(SCMAP.LT.0.0) SCMAP=0.0
        MAPSCA=SCMAP
      END IF
 
C
C--- SET INPUT MODE TO KEYBOARD. SET SCREEN ECHO ON. SET FILE ECHO OFF.
      CALL SPARAM(1,1)
      CALL SPARAM(2,0)
      CALL SPARAM(3,1)
C--- CLOSE SCRIPT AND SCRATCH FILES.
      CALL GPARAM(4,IURSP)
      CALL GPARAM(5,IUTMP)
      CLOSE(IURSP)
      CLOSE(IUTMP)
C
C--- REOPEN A SCRATCH FILE TO UNIT <IUTMP> FOR USE IN ROUTINE <LINES>:
      IF(ITYPE.EQ.1) CALL OPNFIL(IUTMP,' ',3,IUSUM,IBATCH,3)
C
C  OPEN LOG FILE
      CALL OPNFIL (IULOG,'mplot.log',4,IUSUM,IBATCH,3)
C
C  OPEN GKS
C
      CALL OPGKS(MODEL,KND,ICNECT,IULOG,ICOLA,IDCUN,RXM,RYM,
     1     NPIXX,NPIXY,IMDEV,ISEG,IBELL,IFONT,CHSPAC,
     2     IUNAR(14),VER,NPCI,IUSUM,CFGPTH)
C
      IF(KND.LE.0) ISCTYP=1
      IF(IDCUN.NE.0) ISCTYP=1
      WRITE (IULOG,9005) MODEL
9005  FORMAT('OUTPUT DEVICE MODEL =',I9)
      IF (ICOLA.EQ.1) THEN
      WRITE (IULOG,*) 'COLOR DEVICE'
      ELSE IF (ICOLA.EQ.0) THEN
      WRITE (IULOG,*) 'MONOCHROME DEVICE'
      NPCI=1
      END IF
      WRITE(IULOG,9004) NPCI
9004  FORMAT('NUMBER OF FOREGROUND COLORS =',I3)
      rxold=rxm
      ryold=rym
9999   IF(IDCUN.EQ.0) THEN
      WRITE (IULOG,*) 'DEVICE COORDINATES ARE IN METERS.'
      WRITE (IULOG,9006) RXM,RYM
9006  FORMAT('SCREEN DIMENSIONS IN METERS:'/
     1'  X DIMENSION =',F9.6,'  Y DIMENSION =',F9.6)
      ELSE IF (IDCUN.EQ.1) THEN
      WRITE (IULOG,*) 'DEVICE COORDINATES ARE IN ARBITRARY SCREEN COORDI
     1NATES.'
      WRITE (IULOG,9007) RXM,RYM
9007  FORMAT('SCREEN DIMENSIONS IN DEVICE COORDINATES:'/
     1'  X DIMENSION =',F10.3,'   Y DIMENSION =',F10.3)
      END IF
      WRITE (IULOG,9008) NPIXX,NPIXY
9008  FORMAT(I7,' PIXELS IN X DIRECTION'/
     1I7,' PIXELS IN Y DIRECTION')
      CNVICH=39.3701
C IF DEVICE COORDINATES ARE IN METERS, CONVERT PAGE SIZE TO INCHES
      IF(IDCUN.EQ.0) THEN
      PLONG=RXM*CNVICH
      PSHORT=RYM*CNVICH
C OTHERWISE, SET PAGE DIMENSIONS TO THEIR DIMENSIONS IN THE
C DEVICE COORDINATES RETURNED BY THE GKS QUERY.
      ELSE
      PLONG=RXM
      PSHORT=RYM
      END IF
C  IF DEVICE HAS COLOR, DEFINE COLORS
      IF (ICOLA.EQ.1) THEN
      CALL GQCR(1,0,1,IERR,BGCRED,BGCGRN,BGCBLU)
      CALL GQCR(1,1,1,IERR,FGCRED,FGCGRN,FGCBLU)
      NCLR1=0
      IF(IMDEV.EQ.1 .AND. CTR(0).LT.0.0) NCLR1=2
      IF(IMDEV.EQ.1 .AND. CTR(1).LT.0.0) NCLR1=2
      IF(CTR(0).LT.0.0 .OR. CTG(0).LT.0.0 .OR. CTB(0).LT.0.0) THEN
      CTR(0)=BGCRED
      CTG(0)=BGCGRN
      CTB(0)=BGCBLU
      NCLR1=0
      END IF
      IF(CTR(1).LT.0.0 .OR. CTG(1).LT.0.0 .OR. CTB(1).LT.0.0) THEN
      CTR(1)=FGCRED
      CTG(1)=FGCGRN
      CTB(1)=FGCBLU
      NCLR1=0
      END IF
        IF(NCLR.LT.0) THEN
        DO 69 N=2,NPCI
        CTR(N)=CTR(1)
        CTG(N)=CTG(1)
        CTB(N)=CTB(1)
69      CONTINUE
        END IF
      CALL DEFCOL(1,NCLR1,NPCI)
      END IF
C  IF THIS IS TO BE A BLACK&WHITE PLOT, RESET NPCI=1
      IF(NCLR.LT.0) NPCI=1
C
      DO 70 N=1,20
      IF(ICO(N).NE.0.AND.ICO(N).GT.NPCI) ICO(N)=1
      IF(ICYCL(N).NE.0.AND.ICYCL(N).GT.NPCI) ICYCL(N)=1
70    CONTINUE
      IF(NCLR.GT.NPCI) NCLR=1
 
 
C  DETERMINE THE SIZE OF THE PLOT, AND SET SCALING FACTORS.
      IF(IVIEW.EQ.1) THEN
        XMIN1=XMIN
        XMAX1=XMAX
        YMIN1=YMIN
        YMAX1=YMAX
        CALL SCPLOT (PLONG,PL,PSHORT,PS,IPAGE,XMIN,XMAX,YMIN,YMAX,XL,
     1    XR,YB,YT,JUNITS,ISCTYP,PSCFAC,MAPSCA,LEGEND,XLL,XRR,YBB,YTT,
     2    WINLEG)
      ELSE IF(IVIEW.EQ.2) THEN
        XMIN1=YMIN
        XMAX1=YMAX
        YMIN1=ZMIN
        YMAX1=ZMAX
        CALL SCPLOT (PLONG,PL,PSHORT,PS,IPAGE,YMIN,YMAX,ZMIN,ZMAX,XL,
     1    XR,YB,YT,JUNITS,ISCTYP,PSCFAC,MAPSCA,LEGEND,XLL,XRR,YBB,YTT,
     2    WINLEG)
      ELSE IF(IVIEW.EQ.3) THEN
        XMIN1=XMIN
        XMAX1=XMAX
        YMIN1=ZMIN
        YMAX1=ZMAX
        CALL SCPLOT (PLONG,PL,PSHORT,PS,IPAGE,XMIN,XMAX,ZMIN,ZMAX,XL,
     1    XR,YB,YT,JUNITS,ISCTYP,PSCFAC,MAPSCA,LEGEND,XLL,XRR,YBB,YTT,
     2    WINLEG)
      END IF
 
C--- WRITE WINDOW COORDINATE DATA TO THE LOG FILE
      WRITE (IULOG,*) 'COORDINATES OF DEVICE IN WORLD COORDINATES:'
      WRITE(IULOG,9001) XLL,YBB,XRR,YTT
9001  FORMAT(' (X LEFT, Y BOTTOM) = (',E14.7,' , ',E14.7,')'/
     1' (X RIGHT, Y TOP) = (',E14.7,' , ',E14.7,')')
 
 
C  SET SIZE OF ATIVE PLOT WINDOW IN WORLD COORDINATES (WC)
      SIZEX=XRR-XLL
      SIZEY=YTT-YBB
      SIZE=SIZEX
      IF(SIZEY.GT.SIZEX) SIZE=SIZEY
      XNC=SIZEX/SIZE
      YNC=SIZEY/SIZE
      XMINN= (XMIN1-XLL)/SIZE
      XMAXN= (XMAX1-XLL)/SIZE
      YMINN= (YMIN1-YBB)/SIZE
      YMAXN= (YMAX1-YBB)/SIZE
 
      WRITE(IULOG,*) 'COORDINATES OF THE GRID RECTANGLE (WC):'
      WRITE(IULOG,9001) XMIN1,YMIN1,XMAX1,YMAX1
      WRITE(IULOG,*) 'NDC COORDINATES OF GRID RECTANGLE VIEWPORT:'
      WRITE(IULOG,9001) XMINN,YMINN,XMAXN,YMAXN
 
C  SET NORMALIZATION TRANSFORMATION "1" TO BE THE FULL DEVICE DISPLAY SURFACE
      CALL GSTRN(1,XLL,XRR,YBB,YTT,0.,XNC,0.,YNC)
 
C  SET NORMALIZATION TRANSFORMATION "2" EQUAL TO THE GRID RECTANGLE
      CALL GSTRN(2,XMIN1,XMAX1,YMIN1,YMAX1,XMINN,XMAXN,YMINN,YMAXN)
 
C  SELECT TRANSFORMATION 1
      CALL GSELTR(1)
 
C  IF THIS IS SOMETHING OTHER THAN A METAFILE DEVICE, THEN SET THE
C  WORKSTATION WINDOW SIZE (NTC) AND WORKSTATION VIEWPORT (DC)
      IF(IMDEV.EQ.0) THEN
        CALL GSWKWN(1,0.,XNC,0.,YNC)
        IF(KND.LE.0) CALL GETDC(MODEL,RXM,RYM)
        CALL GSWKVP(1,0.,RXM,0.,RYM)
        IF(KND.LE.0) CALL GUWK(1,1)
      END IF
 
C  SET ASPECT FLAGS
      CALL GSASF(LASF)
 
C  SET TEXT FONT & PRECISION, CHARACTER HEIGHT & SPACING
C  (USE STROKE PRECISION -- I.E. IPREC=2)
      HGHT= 0.015*(XR-XL)
      CALL SETTXT(IFONT,2,HGHT,CHSPAC)
 
C
C--- OPEN SEGMENT, IF NECESSARY
C
      IF(ISEG.GT.0) CALL SEGMNT(1,1)
C
      PX=PL
      PY=PS
      IF(IBRDR.NE.0.OR.KND.LE.0) THEN
      XBRDR(1)=XLL
      YBRDR(1)=YBB
      XBRDR(2)=XRR
      YBRDR(2)=YBRDR(1)
      XBRDR(3)=XBRDR(2)
      YBRDR(3)=YTT
      XBRDR(4)=XBRDR(1)
      YBRDR(4)=YBRDR(3)
      XBRDR(5)=XBRDR(1)
      YBRDR(5)=YBRDR(1)
      CALL GPL(5,XBRDR,YBRDR)
      END IF
 
      CALL PKCLR(ICO(7))
      CALL NOTATE (XL,XR,YB,YT,PX,PY,JUNITS,TITLE,VEX,IVIEW,XMIN1,
     1             YMIN1,PSCFAC)
C
C--- PLOT MISCELLANEOUS LINES AND POINTS IF APPROPRIATE
C
      IF(IVIEW.EQ.1.AND.IMISC.EQ.1) CALL DCFDRW(1,IUDCF,NPCI,1,2,
     1   LVSACT,MAXLVS,IUSUM)
 
C
C---BEGIN BLOCK 9 : DRAW GRID
 
C-----IF PLOT IS A MAP VIEW...
      IF(IVIEW.EQ.1) THEN
          CALL QFAST(IPOLD)
          CALL DMGRID(IGZ,IGZBUF,IBOUND(1,1,LAYGD),ZXT,ZXB,XLOC,XMN,
     1     XMX,NROW,NCOL,XMIN,XMAX,YMIN,YMAX,PARRAY(LP1),PARRAY(LP2),
     2     PARRAY(LP3),PARRAY(LP4),PARRAY(LP5),PARRAY(LP6),IGEOL,
     3     NGEOL,IACPAT,JMIN,JMAX,IMIN,IMAX,ISGZ,IOPTIL,IOPTGR,ICO(2),
     4     ICO(1),ICO(4),ICO(12),MAXPTS)
          CALL SFAST(IPOLD)
 
C-----ELSE IF PLOT IS A CROSS SECTION ALONG A COLUMN...
      ELSE IF(IVIEW.EQ.2) THEN
          CALL QFAST(IPOLD)
          CALL DXGRID(IGZ,IGZBUF,IBX,ZXT,ZXB,YLOC,YMN,YMX,NLAY,
     1     NROW,PARRAY(LP1),PARRAY(LP2),PARRAY(LP3),
     2     PARRAY(LP4),PARRAY(LP5),PARRAY(LP6),ICB,IGEOL,NGEOL,IACPAT,
     3     IMINX,IMAXX,KMIN,KMAX,ISGZ,ICBPAT,IOPTIL,IOPTGR,ICO(2),
     4     ICO(1),ICO(6),ICO(5),ICO(4),ICO(12),MAXPTS)
          CALL SFAST(IPOLD)
          IF(IXTYPE.EQ.1 .AND. IWTLIN.GT.0) CALL WTDRAW(HEAD,BUFF,
     1      LAYCON,NCOL,NROW,NLAY,IVIEW,JCOLGD,IYDIR,YLOC,NROW,HNOFLO,
     2      HDRY,KONCLR,VEX,IWTLIN)
 
C-----ELSE IF PLOT IS CROSS SECTION ALONG A ROW...
      ELSE IF(IVIEW.EQ.3) THEN
          CALL QFAST(IPOLD)
          CALL DXGRID(IGZ,IGZBUF,IBX,ZXT,ZXB,XLOC,XMN,XMX,NLAY,
     1     NCOL,PARRAY(LP1),PARRAY(LP2),PARRAY(LP3),
     2     PARRAY(LP4),PARRAY(LP5),PARRAY(LP6),ICB,IGEOL,NGEOL,IACPAT,
     3     JMINX,JMAXX,KMIN,KMAX,ISGZ,ICBPAT,IOPTIL,IOPTGR,ICO(2),
     4     ICO(1),ICO(6),ICO(5),ICO(4),ICO(12),MAXPTS)
          CALL SFAST(IPOLD)
          IF(IXTYPE.EQ.1 .AND. IWTLIN.GT.0) CALL WTDRAW(HEAD,BUFF,
     1      LAYCON,NCOL,NROW,NLAY,IVIEW,IROWGD,IXDIR,XLOC,NCOL,HNOFLO,
     2      HDRY,KONCLR,VEX,IWTLIN)
      END IF
C---END BLOCK 9
 
 
C
C--- PLOT MISCELLANEOUS LINES AND POINTS IF APPROPRIATE
C
      IF(IVIEW.EQ.1.AND.IMISC.EQ.1) CALL DCFDRW(2,IUDCF,NPCI,1,2,
     1  LVSACT,MAXLVS,IUSUM)
 
 
C---BEGIN BLOCK 10 : PLOT PARTICLE PATHS AND/OR POINTS (itype= 1 - 5)
C
 
      IF(ITYPE.EQ.1) THEN
        IF(IVIEW.EQ.1) THEN
         PTSCAL=XMAX-XMIN
         IF(PTSCAL.LT.(YMAX-YMIN)) PTSCAL=YMAX-YMIN
         CALL LINES(IUPTH,IUEPT,IUCBF,IUTMP,IUIZP,IUSUM,PTSCAL,ZBOT,
     1   ZTOP,ZMN,ZMX,NZDIM,IGRID,IXTYPE,0,HEAD,BUFF,LAYCON,NCON,IDIR,
     2   IBPZON,NCOL,NROW,NLAY,IVIEW,IPTS,IPROJ,LAYER,NCLR,ISKIP,TMAX,
     3   NUMTS,NPER,XMN,XMX,NCOL,HDRY,HNOFLO,ISS,VEX,ICMPCT,HPREV,
     4   TBEGIN,PERLEN,TIMX,KMIN,KMAX)
C
        ELSE IF(IVIEW.EQ.2) THEN
         PTSCAL=YMAX-YMIN
         IF(PTSCAL.LT.(ZMAX-ZMIN)) PTSCAL=ZMAX-ZMIN
         CALL LINES(IUPTH,IUEPT,IUCBF,IUTMP,IUIZP,IUSUM,PTSCAL,ZBOT,
     1   ZTOP,ZMN,ZMX,NZDIM,IGRID,IXTYPE,IYDIR,HEAD,BUFF,LAYCON,NCON,
     2   IDIR,IBPZON,NCOL,NROW,NLAY,IVIEW,IPTS,IPROJ,JCOL,NCLR,ISKIP,
     3   TMAX,NUMTS,NPER,YMN,YMX,NROW,HDRY,HNOFLO,ISS,VEX,ICMPCT,HPREV,
     4   TBEGIN,PERLEN,TIMX,KMIN,KMAX)
C
        ELSE IF(IVIEW.EQ.3) THEN
         PTSCAL=XMAX-XMIN
         IF(PTSCAL.LT.(ZMAX-ZMIN)) PTSCAL=ZMAX-ZMIN
        CALL LINES(IUPTH,IUEPT,IUCBF,IUTMP,IUIZP,IUSUM,PTSCAL,ZBOT,ZTOP,
     1   ZMN,ZMX,NZDIM,IGRID,IXTYPE,IXDIR,HEAD,BUFF,LAYCON,NCON,IDIR,
     2   IBPZON,NCOL,NROW,NLAY,IVIEW,IPTS,IPROJ,IROW,NCLR,ISKIP,TMAX,
     3   NUMTS,NPER,XMN,XMX,NCOL,HDRY,HNOFLO,ISS,VEX,ICMPCT,HPREV,
     4   TBEGIN,PERLEN,TIMX,KMIN,KMAX)
        END IF
      END IF
 
      IF(ITYPE.EQ.2) THEN
        IF(IVIEW.EQ.1) THEN
         CALL POINTS(IUEPT,XMIN,XMAX,YMIN,YMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,XMN,XMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NCOL,
     2      IXTYPE,IXDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,LAYER,NCLR,0,0,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        ELSE IF (IVIEW.EQ.2) THEN
         CALL POINTS(IUEPT,YMIN,YMAX,ZMIN,ZMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,YMN,YMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NROW,
     2      IXTYPE,IYDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,JCOL,NCLR,0,0,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        ELSE IF (IVIEW.EQ.3) THEN
         CALL POINTS(IUEPT,XMIN,XMAX,ZMIN,ZMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,XMN,XMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NCOL,
     2      IXTYPE,IXDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,IROW,NCLR,0,0,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        END IF
      END IF
 
      IF(ITYPE.EQ.3) THEN
        IF(IVIEW.EQ.1) THEN
         CALL POINTS(IUEPT,XMIN,XMAX,YMIN,YMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,XMN,XMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NCOL,
     2      IXTYPE,IXDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,LAYER,NCLR,0,1,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        ELSE IF (IVIEW.EQ.2) THEN
         CALL POINTS(IUEPT,YMIN,YMAX,ZMIN,ZMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,YMN,YMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NROW,
     2      IXTYPE,IYDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,JCOL,NCLR,0,1,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        ELSE IF (IVIEW.EQ.3) THEN
         CALL POINTS(IUEPT,XMIN,XMAX,ZMIN,ZMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,XMN,XMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NCOL,
     2      IXTYPE,IXDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,IROW,NCLR,0,1,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        END IF
      END IF
 
      IF(ITYPE.EQ.4) THEN
        IF(IVIEW.EQ.1) THEN
         CALL POINTS(IUEPT,XMIN,XMAX,YMIN,YMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,XMN,XMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NCOL,
     2      IXTYPE,IXDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,LAYER,NCLR,1,1,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        ELSE IF (IVIEW.EQ.2) THEN
         CALL POINTS(IUEPT,YMIN,YMAX,ZMIN,ZMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,YMN,YMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NROW,
     2      IXTYPE,IYDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,JCOL,NCLR,1,1,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        ELSE IF (IVIEW.EQ.3) THEN
         CALL POINTS(IUEPT,XMIN,XMAX,ZMIN,ZMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,XMN,XMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NCOL,
     2      IXTYPE,IXDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,IROW,NCLR,1,1,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        END IF
      END IF
 
      IF(ITYPE.EQ.5) THEN
        IF(IVIEW.EQ.1) THEN
         CALL POINTS(IUTIM,XMIN,XMAX,YMIN,YMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,XMN,XMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NCOL,
     2      IXTYPE,IXDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,LAYER,NCLR,0,0,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        ELSE IF (IVIEW.EQ.2) THEN
         CALL POINTS(IUTIM,YMIN,YMAX,ZMIN,ZMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,YMN,YMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NROW,
     2      IXTYPE,IYDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,JCOL,NCLR,0,0,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        ELSE IF (IVIEW.EQ.3) THEN
         CALL POINTS(IUTIM,XMIN,XMAX,ZMIN,ZMAX,ZBOT,ZTOP,ZMN,ZMX,LAYCON,
     1      HEAD,BUFF,XMN,XMX,NUMTS,NPER,NCOL,NROW,NLAY,NZDIM,NCOL,
     2      IXTYPE,IXDIR,VEX,HDRY,HNOFLO,IGRID,IVIEW,ISS,NPSTPS,ISPLOT,
     3      51,IPROJ,IROW,NCLR,0,0,IPLOT,IEPTYP,IEPOPT,EPSCAL,ITYPE,
     4      IBPZON,IUSUM,IUCBF,ICMPCT)
        END IF
      END IF
 
C---END BLOCK 10
 
 
C---BEGIN BLOCK 11 : PLOT RIVERS, WELLS, AND RELATED FEATURES
C
C  Read Budget headers until we get to the correct time step
      IUCBC=IUNIT(7)
      IF(ISSFLG(IPER).EQ.0) THEN 
         CALL RDBUDG(BUFF,TEXT,NCOL,NROW,NLAY,IUCBC,IUSUM,IPER,ISTP,
     1           IBUFF)
         IF(TEXT.NE.'         STORAGE') THEN
            WRITE(IUSUM,*)
     1      'Budget data out of sequence -- cannot plot stress symbols'
            GO TO 400
         END IF
      END IF
      CALL RDBUDG(BUFF,TEXT,NCOL,NROW,NLAY,IUCBC,IUSUM,IPER,ISTP,IBUFF)
      IF(TEXT.NE.'   CONSTANT HEAD') THEN
         WRITE(IUSUM,*)
     1   'Budget data out of sequence -- cannot plot stress symbols'
         GO TO 400
      END IF
      CALL RDBUDG(BUFF,TEXT,NCOL,NROW,NLAY,IUCBC,IUSUM,IPER,ISTP,IBUFF)
      IF(TEXT.NE.'FLOW RIGHT FACE ') THEN
         WRITE(IUSUM,*)
     1   'Budget data out of sequence -- cannot plot stress symbols'
         GO TO 400
      END IF
      CALL RDBUDG(BUFF,TEXT,NCOL,NROW,NLAY,IUCBC,IUSUM,IPER,ISTP,IBUFF)
      IF(TEXT.NE.'FLOW FRONT FACE ') THEN
         WRITE(IUSUM,*)
     1   'Budget data out of sequence -- cannot plot stress symbols'
         GO TO 400
      END IF
      CALL RDBUDG(BUFF,TEXT,NCOL,NROW,NLAY,IUCBC,IUSUM,IPER,ISTP,IBUFF)
      IF(TEXT.NE.'FLOW LOWER FACE ') THEN
         WRITE(IUSUM,*)
     1   'Budget data out of sequence -- cannot plot stress symbols'
         GO TO 400
      END IF
C
C-----IF PLOT IS MAP VIEW...
C
      IF(IVIEW.EQ.1) THEN
100      CALL PSTR(IMIN,IMAX,JMIN,JMAX,1,NLAY,
     1   XMN,XMX,YMN,YMX,ZXT,ZXB,NCOL,NROW,NLAY,IVIEW,NCLR,
     2   IUSUM,IPROJ,LAYER,IPER,ISTP,NCOL,NROW,0,IEND,
     3   BUFF,IBUFF,IUCBC)
         IF(IEND.EQ.0) GO TO 100
 
C-----ELSE IF PLOT IS A CROSS SECTION ALONG A COLUMN...
C
      ELSE IF(IVIEW.EQ.2) THEN
200      CALL PSTR(IMIN,IMAX,JCOLGD,JCOLGD,KMIN,KMAX,
     1   XMN,XMX,YMN,YMX,ZXT,ZXB,NCOL,NROW,NLAY,IVIEW,NCLR,
     2   IUSUM,IPROJ,ISLICE,IPER,ISTP,NROW,NLAY,IYDIR,IEND,
     3   BUFF,IBUFF,IUCBC)
         IF(IEND.EQ.0) GO TO 200
 
C-----ELSE IF PLOT IS A CROSS SECTION ALONG A ROW
C
      ELSE IF(IVIEW.EQ.3) THEN
300      CALL PSTR(IROWGD,IROWGD,JMIN,JMAX,KMIN,KMAX,
     1   XMN,XMX,YMN,YMX,ZXT,ZXB,NCOL,NROW,NLAY,IVIEW,NCLR,
     2   IUSUM,IPROJ,ISLICE,IPER,ISTP,NCOL,NLAY,IXDIR,IEND,
     3   BUFF,IBUFF,IUCBC)
         IF(IEND.EQ.0) GO TO 300
 
      END IF
C---END BLOCK 11
 
 
C
C--- PLOT MISCELLANEOUS LINES AND POINTS IF APPROPRIATE
C
400   IF(IVIEW.EQ.1.AND.IMISC.EQ.1) CALL DCFDRW(3,IUDCF,NPCI,1,2,
     1   LVSACT,MAXLVS,IUSUM)
 
 
C
C--- PLOT CONTOURS IF IT IS A MAP VIEW PLOT AND CONTOURS ARE ON
      IF(IVIEW.EQ.1.AND.ICNTOR.NE.0) THEN
      CALL PKCLR(KONCLR)
      CALL CONTOR(NCOL,NROW,CDATA,XLOC,YLOC,CLEV,NLEVS,IBRMAP,IBUFF,
     1            JMIN,JMAX,IMIN,IMAX,KLABEL,NLABEL,LFIRST,HNOFLO,
     2            HDRY)
      END IF
 
 
C
C--- PLOT MISCELLANEOUS TEXT IF APPROPRIATE
C
      IF(IVIEW.EQ.1.AND.IMISC.EQ.1) CALL DCFDRW(4,IUDCF,NPCI,1,2,
     1   LVSACT,MAXLVS,IUSUM)
 
C
C--- DRAW LEGEND FOR GRID UNIT ARRAY DATA
C
      IF(LEGEND.NE.0) THEN
        CALL PKCLR(ICO(7))
        CALL DLEGND(NGUA,WINLEG,LMESS,HGHT,CHSPAC,NLMESS,
     1                            TLEGND,IGEOL,NGEOL,IFONT,ISGZ)
      END IF
C
C--- CLOSE SEGMENT IF NECESSARY.
      IF(ISEG.GT.0) CALL SEGMNT(1,2)
 
C
C  CLOSE GKS
C
      HGHT2=HGHT/PSCFAC
      CALL SETTXT(IFONT,2,HGHT2,CHSPAC)
 
      CALL CLGKS(KND,IWAIT,ISEG,IBELL,RXM,RYM,IUSUM,NCOL,NROW,
     1 IMIN,IMAX,JMIN,JMAX,XMN,XMX,YMN,YMX,IVIEW,iredraw)
          if(iredraw.ne.0) then
             call igrareaclear
             nxold=npixx
             nyold=npixy
             npixx=infoscreen(4)
             npixy=infoscreen(5)
             rxm=rxold*npixx/nxold
             rym=ryold*npixy/nyold
             rxold=rxm
             ryold=rym
             rewind(unit=iucbc)
             go to 9999
          end if
C
      RETURN
      END
