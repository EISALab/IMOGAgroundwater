package ncsa.d2k.modules.core.optimize.ga.emo.functions;

import ncsa.d2k.modules.core.datatype.table.transformations.*;
import ncsa.d2k.modules.core.transform.table.*;
import ncsa.d2k.modules.core.transform.attribute.*;
import ncsa.d2k.modules.core.datatype.table.*;
import ncsa.d2k.modules.core.optimize.ga.*;

public class ConstraintConstructionFunction extends ConstructionFunction implements Constraint {
        private Construction[] violationFunctions;
        private double weight;

        public ConstraintConstructionFunction(Construction filter, 
                                              Construction[] viol,
                                              double w) {
                super(filter);
                violationFunctions = viol;
                weight = w;
        }
        
        public double getWeight() {
          return weight;
        }

        public double[] evaluate(Population p, MutableTable mt) throws Exception {
                // evalute the constraint construction (filter)
                FilterExpression fe = new FilterExpression(mt, true);
                fe.setExpression(getConstruction().expression);
                Object filterRes = fe.evaluate();
                
                boolean[] flags = (boolean[])filterRes;

                // next, evaluate all violation functions
                // for each row, add up the violation
                int numViol = violationFunctions.length;
                
                double[][] violationResults = new double[numViol][];
                
                for(int i = 0; i < numViol; i++) {
                  ColumnExpression ce = new ColumnExpression(mt);  
                  ce.setExpression(violationFunctions[i].expression); 
                  Object ret = ce.evaluate();
                  double[] r = (double[])ret; 
                  violationResults[i] = r;
                }
                
                int size = p.size();
                double[] sums = new double[size];
                for(int i = 0; i < size; i++) {
                  // if the constraint was violated,
                  // then add up the violation results
                  // and set it
                  if(flags[i]) {
                    double sum = 0;
                    for(int j = 0; j < numViol; j++) {
                      sum += violationResults[j][i];  
                    }
                    sums[i] = sum; 
                  }
                  else {
                    sums[i] = 0;  
                  }
                }
                
                // the added column is the violation sums	
                return sums;
        }
}